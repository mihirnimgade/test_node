
test_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f78  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c4  080051c4  00020150  2**0
                  CONTENTS
  4 .ARM          00000000  080051c4  080051c4  00020150  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051c4  080051c4  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  080051cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001afc  20000150  0800531c  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c4c  0800531c  00021c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a43  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003817  00000000  00000000  00037bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d1f  00000000  00000000  0003dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167a0  00000000  00000000  000578ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095da0  00000000  00000000  0006e08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103e2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  00103e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000150 	.word	0x20000150
 800012c:	00000000 	.word	0x00000000
 8000130:	08005070 	.word	0x08005070

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000154 	.word	0x20000154
 800014c:	08005070 	.word	0x08005070

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800015a:	4b16      	ldr	r3, [pc, #88]	; (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2210      	movs	r2, #16
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	; (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f000 fcf3 	bl	8000b8c <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 faf8 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	2000016c 	.word	0x2000016c
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b08a      	sub	sp, #40	; 0x28
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a25      	ldr	r2, [pc, #148]	; (800026c <HAL_CAN_MspInit+0xb0>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d143      	bne.n	8000264 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a23      	ldr	r2, [pc, #140]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001f0:	613b      	str	r3, [r7, #16]
 80001f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800020c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	4619      	mov	r1, r3
 8000220:	4814      	ldr	r0, [pc, #80]	; (8000274 <HAL_CAN_MspInit+0xb8>)
 8000222:	f000 ffe1 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	4619      	mov	r1, r3
 800023a:	480e      	ldr	r0, [pc, #56]	; (8000274 <HAL_CAN_MspInit+0xb8>)
 800023c:	f000 ffd4 	bl	80011e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <HAL_CAN_MspInit+0xbc>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800024c:	627b      	str	r3, [r7, #36]	; 0x24
 800024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000250:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000254:	627b      	str	r3, [r7, #36]	; 0x24
 8000256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
 800025e:	4a06      	ldr	r2, [pc, #24]	; (8000278 <HAL_CAN_MspInit+0xbc>)
 8000260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000262:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000264:	bf00      	nop
 8000266:	3728      	adds	r7, #40	; 0x28
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40006400 	.word	0x40006400
 8000270:	40021000 	.word	0x40021000
 8000274:	40010c00 	.word	0x40010c00
 8000278:	40010000 	.word	0x40010000

0800027c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* USER CODE BEGIN RTOS_THREADS */

    sendBatteryMsgHandle = osThreadNew(sendBatteryMsg, NULL, &sendBatteryMsgAttr);
 8000280:	4a0c      	ldr	r2, [pc, #48]	; (80002b4 <MX_FREERTOS_Init+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_FREERTOS_Init+0x3c>)
 8000286:	f002 f95d 	bl	8002544 <osThreadNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <MX_FREERTOS_Init+0x40>)
 800028e:	6013      	str	r3, [r2, #0]
    sendMotorMsgHandle = osThreadNew(sendMotorMsg, NULL, &sendMotorMsgAttr);
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <MX_FREERTOS_Init+0x44>)
 8000292:	2100      	movs	r1, #0
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <MX_FREERTOS_Init+0x48>)
 8000296:	f002 f955 	bl	8002544 <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <MX_FREERTOS_Init+0x4c>)
 800029e:	6013      	str	r3, [r2, #0]
    kernelLEDHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDAttr);
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <MX_FREERTOS_Init+0x50>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <MX_FREERTOS_Init+0x54>)
 80002a6:	f002 f94d 	bl	8002544 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <MX_FREERTOS_Init+0x58>)
 80002ae:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTOS_THREADS */

}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	080050e0 	.word	0x080050e0
 80002b8:	080003c1 	.word	0x080003c1
 80002bc:	20000194 	.word	0x20000194
 80002c0:	08005104 	.word	0x08005104
 80002c4:	08000305 	.word	0x08000305
 80002c8:	20000198 	.word	0x20000198
 80002cc:	08005128 	.word	0x08005128
 80002d0:	080002d9 	.word	0x080002d9
 80002d4:	2000019c 	.word	0x2000019c

080002d8 <kernelLEDTask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

__NO_RETURN void kernelLEDTask (void *argument) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

    while (1) {
        osKernelState_t kernel_status = osKernelGetState();
 80002e0:	f002 f8da 	bl	8002498 <osKernelGetState>
 80002e4:	60f8      	str	r0, [r7, #12]

        if (kernel_status == osKernelRunning) {
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d104      	bne.n	80002f6 <kernelLEDTask+0x1e>
            HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 80002ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <kernelLEDTask+0x28>)
 80002f2:	f001 f915 	bl	8001520 <HAL_GPIO_TogglePin>
        }

        osDelay(KERNEL_LED_DELAY);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f002 f9cd 	bl	8002698 <osDelay>
    while (1) {
 80002fe:	e7ef      	b.n	80002e0 <kernelLEDTask+0x8>
 8000300:	40011000 	.word	0x40011000

08000304 <sendMotorMsg>:
    }
}

__NO_RETURN void sendMotorMsg(void *argument) {
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08c      	sub	sp, #48	; 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef rand_header;

    uint8_t rand_data[8] = {0};
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
    uint32_t rand_index = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t rand_delay = MAX_CAN_MOTOR_TX_DELAY;
 8000318:	23c8      	movs	r3, #200	; 0xc8
 800031a:	857b      	strh	r3, [r7, #42]	; 0x2a

    while (1) {
        rand_index = rand(NUM_MOTOR_MSGS);
 800031c:	2004      	movs	r0, #4
 800031e:	f000 fb89 	bl	8000a34 <rand>
 8000322:	62f8      	str	r0, [r7, #44]	; 0x2c
        rand_header = can_motor_headers[rand_index];
 8000324:	491f      	ldr	r1, [pc, #124]	; (80003a4 <sendMotorMsg+0xa0>)
 8000326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000328:	4613      	mov	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	4413      	add	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	f107 0410 	add.w	r4, r7, #16
 8000336:	461d      	mov	r5, r3
 8000338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800033a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000340:	e884 0003 	stmia.w	r4, {r0, r1}

        rand_array(&rand_data[0], 8);
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	2108      	movs	r1, #8
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fb88 	bl	8000a60 <rand_array>

        free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000350:	4815      	ldr	r0, [pc, #84]	; (80003a8 <sendMotorMsg+0xa4>)
 8000352:	f000 fe34 	bl	8000fbe <HAL_CAN_GetTxMailboxesFreeLevel>
 8000356:	4603      	mov	r3, r0
 8000358:	4a14      	ldr	r2, [pc, #80]	; (80003ac <sendMotorMsg+0xa8>)
 800035a:	6013      	str	r3, [r2, #0]

        status = HAL_CAN_AddTxMessage(&hcan, &rand_header, rand_data, &can_mailbox);
 800035c:	f107 0208 	add.w	r2, r7, #8
 8000360:	f107 0110 	add.w	r1, r7, #16
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <sendMotorMsg+0xac>)
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <sendMotorMsg+0xa4>)
 8000368:	f000 fd4f 	bl	8000e0a <HAL_CAN_AddTxMessage>
 800036c:	4603      	mov	r3, r0
 800036e:	461a      	mov	r2, r3
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <sendMotorMsg+0xb0>)
 8000372:	701a      	strb	r2, [r3, #0]

        if (status != HAL_OK) {
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <sendMotorMsg+0xb0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d003      	beq.n	8000384 <sendMotorMsg+0x80>
            error = 1;
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <sendMotorMsg+0xb4>)
 800037e:	2201      	movs	r2, #1
 8000380:	701a      	strb	r2, [r3, #0]
 8000382:	e004      	b.n	800038e <sendMotorMsg+0x8a>
        } else {
            HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 8000384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <sendMotorMsg+0xb8>)
 800038a:	f001 f8c9 	bl	8001520 <HAL_GPIO_TogglePin>
        }

        rand_delay = rand(MAX_CAN_MOTOR_TX_DELAY);
 800038e:	20c8      	movs	r0, #200	; 0xc8
 8000390:	f000 fb50 	bl	8000a34 <rand>
 8000394:	4603      	mov	r3, r0
 8000396:	857b      	strh	r3, [r7, #42]	; 0x2a
        osDelay(rand_delay);
 8000398:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800039a:	4618      	mov	r0, r3
 800039c:	f002 f97c 	bl	8002698 <osDelay>
        rand_index = rand(NUM_MOTOR_MSGS);
 80003a0:	e7bc      	b.n	800031c <sendMotorMsg+0x18>
 80003a2:	bf00      	nop
 80003a4:	20000078 	.word	0x20000078
 80003a8:	2000016c 	.word	0x2000016c
 80003ac:	200001a8 	.word	0x200001a8
 80003b0:	200001a4 	.word	0x200001a4
 80003b4:	200001a0 	.word	0x200001a0
 80003b8:	200001a1 	.word	0x200001a1
 80003bc:	40011000 	.word	0x40011000

080003c0 <sendBatteryMsg>:
    }
}

__NO_RETURN void sendBatteryMsg(void *argument) {
 80003c0:	b5b0      	push	{r4, r5, r7, lr}
 80003c2:	b08c      	sub	sp, #48	; 0x30
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef rand_header;

    int8_t rand_data[8] = {0};
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
    uint32_t rand_index = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t rand_delay = MAX_CAN_BATT_TX_DELAY;
 80003d4:	23c8      	movs	r3, #200	; 0xc8
 80003d6:	857b      	strh	r3, [r7, #42]	; 0x2a

    int8_t rand_soc = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    while (1) {
        rand_index = rand(NUM_BATTERY_MSGS);
 80003de:	2005      	movs	r0, #5
 80003e0:	f000 fb28 	bl	8000a34 <rand>
 80003e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        rand_header = can_battery_headers[rand_index];
 80003e6:	4983      	ldr	r1, [pc, #524]	; (80005f4 <sendBatteryMsg+0x234>)
 80003e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003ea:	4613      	mov	r3, r2
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4413      	add	r3, r2
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	440b      	add	r3, r1
 80003f4:	f107 0410 	add.w	r4, r7, #16
 80003f8:	461d      	mov	r5, r3
 80003fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000402:	e884 0003 	stmia.w	r4, {r0, r1}

        if (rand_header.StdId == 0x623) {
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f240 6223 	movw	r2, #1571	; 0x623
 800040c:	4293      	cmp	r3, r2
 800040e:	d137      	bne.n	8000480 <sendBatteryMsg+0xc0>
            rand_soc = rand(65535);
 8000410:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000414:	f000 fb0e 	bl	8000a34 <rand>
 8000418:	4603      	mov	r3, r0
 800041a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[0] = rand_soc >> 8;
 800041e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8000422:	121b      	asrs	r3, r3, #8
 8000424:	b25b      	sxtb	r3, r3
 8000426:	723b      	strb	r3, [r7, #8]
            rand_data[1] = rand_soc & rand_data[0];
 8000428:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800042c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000430:	4013      	ands	r3, r2
 8000432:	b25b      	sxtb	r3, r3
 8000434:	727b      	strb	r3, [r7, #9]

            rand_soc = rand(255);
 8000436:	20ff      	movs	r0, #255	; 0xff
 8000438:	f000 fafc 	bl	8000a34 <rand>
 800043c:	4603      	mov	r3, r0
 800043e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[2] = rand_soc;
 8000442:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000446:	72bb      	strb	r3, [r7, #10]

            rand_soc = rand(255);
 8000448:	20ff      	movs	r0, #255	; 0xff
 800044a:	f000 faf3 	bl	8000a34 <rand>
 800044e:	4603      	mov	r3, r0
 8000450:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[3] = rand_soc;
 8000454:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000458:	72fb      	strb	r3, [r7, #11]

            rand_soc = rand(255);
 800045a:	20ff      	movs	r0, #255	; 0xff
 800045c:	f000 faea 	bl	8000a34 <rand>
 8000460:	4603      	mov	r3, r0
 8000462:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[4] = rand_soc;
 8000466:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800046a:	733b      	strb	r3, [r7, #12]

            rand_soc = rand(255);
 800046c:	20ff      	movs	r0, #255	; 0xff
 800046e:	f000 fae1 	bl	8000a34 <rand>
 8000472:	4603      	mov	r3, r0
 8000474:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[5] = rand_soc;
 8000478:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800047c:	737b      	strb	r3, [r7, #13]
 800047e:	e08f      	b.n	80005a0 <sendBatteryMsg+0x1e0>
        }else if (rand_header.StdId == 0x624) {
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	f240 6224 	movw	r2, #1572	; 0x624
 8000486:	4293      	cmp	r3, r2
 8000488:	d139      	bne.n	80004fe <sendBatteryMsg+0x13e>
            rand_soc = rand(64000) - 32000;
 800048a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
 800048e:	f000 fad1 	bl	8000a34 <rand>
 8000492:	4603      	mov	r3, r0
 8000494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[0] = rand_soc >> 8;
 8000498:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 800049c:	121b      	asrs	r3, r3, #8
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	723b      	strb	r3, [r7, #8]
            rand_data[1] = rand_soc & rand_data[0];
 80004a2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80004a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80004aa:	4013      	ands	r3, r2
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	727b      	strb	r3, [r7, #9]

            rand_soc = rand(65000);
 80004b0:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 80004b4:	f000 fabe 	bl	8000a34 <rand>
 80004b8:	4603      	mov	r3, r0
 80004ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[2] = rand_soc >> 8;
 80004be:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80004c2:	121b      	asrs	r3, r3, #8
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	72bb      	strb	r3, [r7, #10]
            rand_data[3] = rand_soc & rand_data[0];
 80004c8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80004cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80004d0:	4013      	ands	r3, r2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	72fb      	strb	r3, [r7, #11]

            rand_soc = rand(65000);
 80004d6:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 80004da:	f000 faab 	bl	8000a34 <rand>
 80004de:	4603      	mov	r3, r0
 80004e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[4] = rand_soc >> 8;
 80004e4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80004e8:	121b      	asrs	r3, r3, #8
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	733b      	strb	r3, [r7, #12]
            rand_data[5] = rand_soc & rand_data[0];
 80004ee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80004f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80004f6:	4013      	ands	r3, r2
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	737b      	strb	r3, [r7, #13]
 80004fc:	e050      	b.n	80005a0 <sendBatteryMsg+0x1e0>
        }
        else if (rand_header.StdId == 0x626) {
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	f240 6226 	movw	r2, #1574	; 0x626
 8000504:	4293      	cmp	r3, r2
 8000506:	d109      	bne.n	800051c <sendBatteryMsg+0x15c>
            rand_soc = rand(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fa93 	bl	8000a34 <rand>
 800050e:	4603      	mov	r3, r0
 8000510:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[0] = rand_soc;
 8000514:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000518:	723b      	strb	r3, [r7, #8]
 800051a:	e041      	b.n	80005a0 <sendBatteryMsg+0x1e0>
        } else if (rand_header.StdId == 0x627) {
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	f240 6227 	movw	r2, #1575	; 0x627
 8000522:	4293      	cmp	r3, r2
 8000524:	d136      	bne.n	8000594 <sendBatteryMsg+0x1d4>
            rand_soc = rand(254) - 127;
 8000526:	20fe      	movs	r0, #254	; 0xfe
 8000528:	f000 fa84 	bl	8000a34 <rand>
 800052c:	4603      	mov	r3, r0
 800052e:	b2db      	uxtb	r3, r3
 8000530:	3b7f      	subs	r3, #127	; 0x7f
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[0] = rand_soc;
 8000538:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800053c:	723b      	strb	r3, [r7, #8]

            rand_soc = rand(254) - 127;
 800053e:	20fe      	movs	r0, #254	; 0xfe
 8000540:	f000 fa78 	bl	8000a34 <rand>
 8000544:	4603      	mov	r3, r0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	3b7f      	subs	r3, #127	; 0x7f
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[2] = rand_soc;
 8000550:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000554:	72bb      	strb	r3, [r7, #10]

            rand_soc = rand(255);
 8000556:	20ff      	movs	r0, #255	; 0xff
 8000558:	f000 fa6c 	bl	8000a34 <rand>
 800055c:	4603      	mov	r3, r0
 800055e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[3] = rand_soc;
 8000562:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000566:	72fb      	strb	r3, [r7, #11]

            rand_soc = rand(254) - 127;
 8000568:	20fe      	movs	r0, #254	; 0xfe
 800056a:	f000 fa63 	bl	8000a34 <rand>
 800056e:	4603      	mov	r3, r0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3b7f      	subs	r3, #127	; 0x7f
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[4] = rand_soc;
 800057a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800057e:	733b      	strb	r3, [r7, #12]

            rand_soc = rand(255);
 8000580:	20ff      	movs	r0, #255	; 0xff
 8000582:	f000 fa57 	bl	8000a34 <rand>
 8000586:	4603      	mov	r3, r0
 8000588:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[5] = rand_soc;
 800058c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000590:	737b      	strb	r3, [r7, #13]
 8000592:	e005      	b.n	80005a0 <sendBatteryMsg+0x1e0>
        } else {
            signed_rand_array(&rand_data[0], 8);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2108      	movs	r1, #8
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fa7f 	bl	8000a9e <signed_rand_array>
        }

        free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80005a0:	4815      	ldr	r0, [pc, #84]	; (80005f8 <sendBatteryMsg+0x238>)
 80005a2:	f000 fd0c 	bl	8000fbe <HAL_CAN_GetTxMailboxesFreeLevel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <sendBatteryMsg+0x23c>)
 80005aa:	6013      	str	r3, [r2, #0]

        status = HAL_CAN_AddTxMessage(&hcan, &rand_header, rand_data, &can_mailbox);
 80005ac:	f107 0208 	add.w	r2, r7, #8
 80005b0:	f107 0110 	add.w	r1, r7, #16
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <sendBatteryMsg+0x240>)
 80005b6:	4810      	ldr	r0, [pc, #64]	; (80005f8 <sendBatteryMsg+0x238>)
 80005b8:	f000 fc27 	bl	8000e0a <HAL_CAN_AddTxMessage>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <sendBatteryMsg+0x244>)
 80005c2:	701a      	strb	r2, [r3, #0]

        if (status != HAL_OK) {
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <sendBatteryMsg+0x244>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <sendBatteryMsg+0x214>
            error = 1;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <sendBatteryMsg+0x248>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e004      	b.n	80005de <sendBatteryMsg+0x21e>
        } else {
            HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <sendBatteryMsg+0x24c>)
 80005da:	f000 ffa1 	bl	8001520 <HAL_GPIO_TogglePin>
        }

        rand_delay = rand(MAX_CAN_BATT_TX_DELAY);
 80005de:	20c8      	movs	r0, #200	; 0xc8
 80005e0:	f000 fa28 	bl	8000a34 <rand>
 80005e4:	4603      	mov	r3, r0
 80005e6:	857b      	strh	r3, [r7, #42]	; 0x2a
        osDelay(rand_delay);
 80005e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f854 	bl	8002698 <osDelay>
        rand_index = rand(NUM_BATTERY_MSGS);
 80005f0:	e6f5      	b.n	80003de <sendBatteryMsg+0x1e>
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	2000016c 	.word	0x2000016c
 80005fc:	200001a8 	.word	0x200001a8
 8000600:	200001a4 	.word	0x200001a4
 8000604:	200001a0 	.word	0x200001a0
 8000608:	200001a1 	.word	0x200001a1
 800060c:	40011000 	.word	0x40011000

08000610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0xa8>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0xa8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_GPIO_Init+0xac>)
 800068c:	f000 ff30 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 8000690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0xac>)
 80006aa:	f000 fd9d 	bl	80011e8 <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40011000 	.word	0x40011000

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fa30 	bl	8000b28 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f812 	bl	80006f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f7ff ffa0 	bl	8000610 <MX_GPIO_Init>
  MX_CAN_Init();
 80006d0:	f7ff fd3e 	bl	8000150 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f91a 	bl	800090c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <main+0x2c>)
 80006da:	f000 fb52 	bl	8000d82 <HAL_CAN_Start>

  /* USER CODE END 2 */

  osKernelInitialize();
 80006de:	f001 fea9 	bl	8002434 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006e2:	f7ff fdcb 	bl	800027c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006e6:	f001 fef9 	bl	80024dc <osKernelStart>

  /* Infinite loop */
  while (1);
 80006ea:	e7fe      	b.n	80006ea <main+0x2a>
 80006ec:	2000016c 	.word	0x2000016c

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b090      	sub	sp, #64	; 0x40
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fbf0 	bl	8004ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800072e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	4618      	mov	r0, r3
 800073a:	f000 ff0b 	bl	8001554 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000744:	f000 f82c 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2102      	movs	r1, #2
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f978 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076e:	f000 f817 	bl	80007a0 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3740      	adds	r7, #64	; 0x40
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d101      	bne.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078e:	f000 f9e1 	bl	8000b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40012c00 	.word	0x40012c00

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_MspInit+0x60>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <HAL_MspInit+0x60>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <HAL_MspInit+0x60>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_MspInit+0x60>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <HAL_MspInit+0x60>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_MspInit+0x60>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 fcd2 	bl	8001192 <HAL_NVIC_SetPriority>

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_MspInit+0x64>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_MspInit+0x64>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2019      	movs	r0, #25
 800082a:	f000 fcb2 	bl	8001192 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800082e:	2019      	movs	r0, #25
 8000830:	f000 fccb 	bl	80011ca <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <HAL_InitTick+0x9c>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <HAL_InitTick+0x9c>)
 800083a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_InitTick+0x9c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800084c:	f107 0210 	add.w	r2, r7, #16
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f001 fa78 	bl	8001d4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800085c:	f001 fa62 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8000860:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_InitTick+0xa0>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	0c9b      	lsrs	r3, r3, #18
 800086c:	3b01      	subs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_InitTick+0xa4>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <HAL_InitTick+0xa8>)
 8000874:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_InitTick+0xa4>)
 8000878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800087c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_InitTick+0xa4>)
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_InitTick+0xa4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_InitTick+0xa4>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <HAL_InitTick+0xa4>)
 8000892:	f001 faa9 	bl	8001de8 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d104      	bne.n	80008a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <HAL_InitTick+0xa4>)
 800089e:	f001 fafb 	bl	8001e98 <HAL_TIM_Base_Start_IT>
 80008a2:	4603      	mov	r3, r0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	431bde83 	.word	0x431bde83
 80008b8:	200001ac 	.word	0x200001ac
 80008bc:	40012c00 	.word	0x40012c00

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
	...

080008ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <TIM1_UP_IRQHandler+0x10>)
 80008f2:	f001 fb23 	bl	8001f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001ac 	.word	0x200001ac

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_USART2_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000944:	f001 fc9a 	bl	800227c <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f7ff ff27 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001f4 	.word	0x200001f4
 800095c:	40004400 	.word	0x40004400

08000960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <HAL_UART_MspInit+0x88>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d12f      	bne.n	80009e0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_MspInit+0x8c>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x8c>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	61d3      	str	r3, [r2, #28]
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x8c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0x8c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_UART_MspInit+0x8c>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x8c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b0:	2304      	movs	r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	; (80009f0 <HAL_UART_MspInit+0x90>)
 80009c4:	f000 fc10 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c8:	2308      	movs	r3, #8
 80009ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0x90>)
 80009dc:	f000 fc04 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800

080009f4 <xorshift32>:
 *      Author: Mihir Nimgade
 */

#include "xorshift.h"

uint32_t xorshift32(struct xorshift32_state *state) {
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    uint32_t x = state->a;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
    x ^= x << 13;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	035b      	lsls	r3, r3, #13
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4053      	eors	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
    x ^= x >> 17;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	0c5b      	lsrs	r3, r3, #17
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4053      	eors	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
    x ^= x << 5;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	015b      	lsls	r3, r3, #5
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4053      	eors	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
    return state->a = x;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <rand>:

uint32_t rand(uint32_t limit) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    // initialize xorshift state
    static struct xorshift32_state state = {
        .a = 3
    };

    return (xorshift32(&state) % limit);
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <rand+0x28>)
 8000a3e:	f7ff ffd9 	bl	80009f4 <xorshift32>
 8000a42:	4603      	mov	r3, r0
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	fb01 f202 	mul.w	r2, r1, r2
 8000a50:	1a9b      	subs	r3, r3, r2
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000dc 	.word	0x200000dc

08000a60 <rand_array>:

void rand_array(uint8_t *array, uint8_t length) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i=0; i<length; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e00c      	b.n	8000a8c <rand_array+0x2c>
        array[i] = rand(256);
 8000a72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a76:	f7ff ffdd 	bl	8000a34 <rand>
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<length; i++) {
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	7bfa      	ldrb	r2, [r7, #15]
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3ee      	bcc.n	8000a72 <rand_array+0x12>
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <signed_rand_array>:

void signed_rand_array(int8_t *array, uint8_t length) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i=0; i<length; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e00c      	b.n	8000aca <signed_rand_array+0x2c>
        array[i] = rand(256);
 8000ab0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ab4:	f7ff ffbe 	bl	8000a34 <rand>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b24a      	sxtb	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<length; i++) {
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	7bfa      	ldrb	r2, [r7, #15]
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3ee      	bcc.n	8000ab0 <signed_rand_array+0x12>
    }
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b02:	f7ff fefd 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 f9b9 	bl	8004e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fdd9 	bl	80006c0 <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000b18:	080051cc 	.word	0x080051cc
  ldr r2, =_sbss
 8000b1c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000b20:	20001c4c 	.word	0x20001c4c

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 fb1f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff fe68 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe32 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <HAL_IncTick+0x20>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	200000e4 	.word	0x200000e4
 8000b74:	20000238 	.word	0x20000238

08000b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000238 	.word	0x20000238

08000b8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e0ed      	b.n	8000d7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fb06 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bc0:	f7ff ffda 	bl	8000b78 <HAL_GetTick>
 8000bc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc6:	e012      	b.n	8000bee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc8:	f7ff ffd6 	bl	8000b78 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b0a      	cmp	r3, #10
 8000bd4:	d90b      	bls.n	8000bee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2205      	movs	r2, #5
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e0c5      	b.n	8000d7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0e5      	beq.n	8000bc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0202 	bic.w	r2, r2, #2
 8000c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c0c:	f7ff ffb4 	bl	8000b78 <HAL_GetTick>
 8000c10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c12:	e012      	b.n	8000c3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c14:	f7ff ffb0 	bl	8000b78 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b0a      	cmp	r3, #10
 8000c20:	d90b      	bls.n	8000c3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2205      	movs	r2, #5
 8000c32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e09f      	b.n	8000d7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1e5      	bne.n	8000c14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7e1b      	ldrb	r3, [r3, #24]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d108      	bne.n	8000c62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e007      	b.n	8000c72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7e5b      	ldrb	r3, [r3, #25]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d108      	bne.n	8000c8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e007      	b.n	8000c9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7e9b      	ldrb	r3, [r3, #26]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d108      	bne.n	8000cb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0220 	orr.w	r2, r2, #32
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e007      	b.n	8000cc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0220 	bic.w	r2, r2, #32
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7edb      	ldrb	r3, [r3, #27]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 0210 	bic.w	r2, r2, #16
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e007      	b.n	8000cf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f042 0210 	orr.w	r2, r2, #16
 8000cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7f1b      	ldrb	r3, [r3, #28]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d108      	bne.n	8000d0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0208 	orr.w	r2, r2, #8
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e007      	b.n	8000d1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0208 	bic.w	r2, r2, #8
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7f5b      	ldrb	r3, [r3, #29]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d108      	bne.n	8000d34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f042 0204 	orr.w	r2, r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e007      	b.n	8000d44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0204 	bic.w	r2, r2, #4
 8000d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	ea42 0103 	orr.w	r1, r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d12e      	bne.n	8000df4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000dae:	f7ff fee3 	bl	8000b78 <HAL_GetTick>
 8000db2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000db4:	e012      	b.n	8000ddc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db6:	f7ff fedf 	bl	8000b78 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	d90b      	bls.n	8000ddc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2205      	movs	r2, #5
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e012      	b.n	8000e02 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1e5      	bne.n	8000db6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e006      	b.n	8000e02 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
  }
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b089      	sub	sp, #36	; 0x24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d003      	beq.n	8000e36 <HAL_CAN_AddTxMessage+0x2c>
 8000e2e:	7ffb      	ldrb	r3, [r7, #31]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	f040 80b8 	bne.w	8000fa6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10a      	bne.n	8000e56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d105      	bne.n	8000e56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a0 	beq.w	8000f96 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	0e1b      	lsrs	r3, r3, #24
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d907      	bls.n	8000e76 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e09e      	b.n	8000fb4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10d      	bne.n	8000ea4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e92:	68f9      	ldr	r1, [r7, #12]
 8000e94:	6809      	ldr	r1, [r1, #0]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	440b      	add	r3, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e00f      	b.n	8000ec4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb4:	68f9      	ldr	r1, [r7, #12]
 8000eb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000eb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3318      	adds	r3, #24
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	440b      	add	r3, r1
 8000ec2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6819      	ldr	r1, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3318      	adds	r3, #24
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	7d1b      	ldrb	r3, [r3, #20]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d111      	bne.n	8000f04 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3318      	adds	r3, #24
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	4413      	add	r3, r2
 8000eec:	3304      	adds	r3, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	6811      	ldr	r1, [r2, #0]
 8000ef4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3318      	adds	r3, #24
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	440b      	add	r3, r1
 8000f00:	3304      	adds	r3, #4
 8000f02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3307      	adds	r3, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	061a      	lsls	r2, r3, #24
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3306      	adds	r3, #6
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3305      	adds	r3, #5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	3204      	adds	r2, #4
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	4610      	mov	r0, r2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6811      	ldr	r1, [r2, #0]
 8000f2c:	ea43 0200 	orr.w	r2, r3, r0
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	440b      	add	r3, r1
 8000f36:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3303      	adds	r3, #3
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	061a      	lsls	r2, r3, #24
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3302      	adds	r3, #2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	4313      	orrs	r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	7812      	ldrb	r2, [r2, #0]
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	6811      	ldr	r1, [r2, #0]
 8000f62:	ea43 0200 	orr.w	r2, r3, r0
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3318      	adds	r3, #24
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	6811      	ldr	r1, [r2, #0]
 8000f84:	f043 0201 	orr.w	r2, r3, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	440b      	add	r3, r1
 8000f90:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e00e      	b.n	8000fb4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e006      	b.n	8000fb4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
  }
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000fd8:	7afb      	ldrb	r3, [r7, #11]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d11d      	bne.n	800101a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3301      	adds	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	; (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff4f 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff64 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ffb2 	bl	8001118 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff81 	bl	80010c4 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff57 	bl	800108c <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e169      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8158 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d05e      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001224:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d875      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800122a:	4a98      	ldr	r2, [pc, #608]	; (800148c <HAL_GPIO_Init+0x2a4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d058      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001230:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d86f      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001236:	4a96      	ldr	r2, [pc, #600]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d052      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d869      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04c      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d863      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800124e:	4a92      	ldr	r2, [pc, #584]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d046      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001254:	4a90      	ldr	r2, [pc, #576]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d85d      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d82a      	bhi.n	80012b4 <HAL_GPIO_Init+0xcc>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d859      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <HAL_GPIO_Init+0x80>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012cf 	.word	0x080012cf
 8001274:	08001311 	.word	0x08001311
 8001278:	08001317 	.word	0x08001317
 800127c:	08001317 	.word	0x08001317
 8001280:	08001317 	.word	0x08001317
 8001284:	08001317 	.word	0x08001317
 8001288:	08001317 	.word	0x08001317
 800128c:	08001317 	.word	0x08001317
 8001290:	08001317 	.word	0x08001317
 8001294:	08001317 	.word	0x08001317
 8001298:	08001317 	.word	0x08001317
 800129c:	08001317 	.word	0x08001317
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001317 	.word	0x08001317
 80012a8:	08001317 	.word	0x08001317
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_GPIO_Init+0x2b4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e029      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e024      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01f      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e01a      	b.n	8001318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e013      	b.n	8001318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e009      	b.n	8001318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e003      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x130>
          break;
 8001316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0x13a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0x13e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d802      	bhi.n	8001334 <HAL_GPIO_Init+0x14c>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x152>
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	3b08      	subs	r3, #8
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	210f      	movs	r1, #15
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80b1 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	492c      	ldr	r1, [pc, #176]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4928      	ldr	r1, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	491e      	ldr	r1, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4914      	ldr	r1, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x2e2>
 8001486:	bf00      	nop
 8001488:	10320000 	.word	0x10320000
 800148c:	10310000 	.word	0x10310000
 8001490:	10220000 	.word	0x10220000
 8001494:	10210000 	.word	0x10210000
 8001498:	10120000 	.word	0x10120000
 800149c:	10110000 	.word	0x10110000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae8e 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	611a      	str	r2, [r3, #16]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	041a      	lsls	r2, r3, #16
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43d9      	mvns	r1, r3
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	400b      	ands	r3, r1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e272      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8087 	beq.w	8001682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00c      	beq.n	800159a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001580:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d112      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
 800158c:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d10b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d06c      	beq.n	8001680 <HAL_RCC_OscConfig+0x12c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d168      	bne.n	8001680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e24c      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x76>
 80015bc:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a7f      	ldr	r2, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x98>
 80015d2:	4b7b      	ldr	r3, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7a      	ldr	r2, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0xbc>
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a71      	ldr	r2, [pc, #452]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 8001610:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff faa2 	bl	8000b78 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fa9e 	bl	8000b78 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e200      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xe4>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa8e 	bl	8000b78 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fa8a 	bl	8000b78 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1ec      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x10c>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x18c>
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1c0      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4939      	ldr	r1, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa43 	bl	8000b78 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fa3f 	bl	8000b78 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1a1      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4927      	ldr	r1, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x270>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fa22 	bl	8000b78 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fa1e 	bl	8000b78 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e180      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03a      	beq.n	80017d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d019      	beq.n	800179e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x274>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fa02 	bl	8000b78 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff f9fe 	bl	8000b78 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e160      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001796:	2001      	movs	r0, #1
 8001798:	f000 fb08 	bl	8001dac <RCC_Delay>
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_OscConfig+0x274>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f9e8 	bl	8000b78 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	e00f      	b.n	80017cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff f9e4 	bl	8000b78 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d908      	bls.n	80017cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e146      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	42420000 	.word	0x42420000
 80017c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b92      	ldr	r3, [pc, #584]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e9      	bne.n	80017ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a6 	beq.w	8001932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b8b      	ldr	r3, [pc, #556]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10d      	bne.n	8001812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a87      	ldr	r2, [pc, #540]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7e      	ldr	r2, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff f9a5 	bl	8000b78 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff f9a1 	bl	8000b78 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e103      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x312>
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a6e      	ldr	r2, [pc, #440]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	e02d      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x334>
 800186e:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a69      	ldr	r2, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	e01c      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x356>
 8001890:	4b61      	ldr	r3, [pc, #388]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a60      	ldr	r2, [pc, #384]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a5d      	ldr	r2, [pc, #372]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 80018aa:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a5a      	ldr	r2, [pc, #360]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a57      	ldr	r2, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f955 	bl	8000b78 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f951 	bl	8000b78 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0b1      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ee      	beq.n	80018d2 <HAL_RCC_OscConfig+0x37e>
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f93f 	bl	8000b78 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff f93b 	bl	8000b78 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e09b      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a3b      	ldr	r2, [pc, #236]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8087 	beq.w	8001a4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d061      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d146      	bne.n	80019de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f90f 	bl	8000b78 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff f90b 	bl	8000b78 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e06d      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4921      	ldr	r1, [pc, #132]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a19      	ldr	r1, [r3, #32]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	491b      	ldr	r1, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff f8df 	bl	8000b78 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f8db 	bl	8000b78 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e03d      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x46a>
 80019dc:	e035      	b.n	8001a4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f8c8 	bl	8000b78 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f8c4 	bl	8000b78 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e026      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x498>
 8001a0a:	e01e      	b.n	8001a4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e019      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x500>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0d0      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d910      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
 8001a82:	4965      	ldr	r1, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001abe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ad6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d040      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e073      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06b      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4936      	ldr	r1, [pc, #216]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f816 	bl	8000b78 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f812 	bl	8000b78 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e053      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d210      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4922      	ldr	r1, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1cc>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1d0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fe04 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	0800514c 	.word	0x0800514c
 8001c24:	200000d8 	.word	0x200000d8
 8001c28:	200000e0 	.word	0x200000e0

08001c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	b490      	push	{r4, r7}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c34:	1d3c      	adds	r4, r7, #4
 8001c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c3c:	f240 2301 	movw	r3, #513	; 0x201
 8001c40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x40>
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x46>
 8001c6a:	e02b      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c6e:	623b      	str	r3, [r7, #32]
      break;
 8001c70:	e02b      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	0c9b      	lsrs	r3, r3, #18
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3328      	adds	r3, #40	; 0x28
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0c5b      	lsrs	r3, r3, #17
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	3328      	adds	r3, #40	; 0x28
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ca0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ca6:	fb03 f202 	mul.w	r2, r3, r2
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	e004      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	623b      	str	r3, [r7, #32]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cc6:	623b      	str	r3, [r7, #32]
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc90      	pop	{r4, r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	080050b8 	.word	0x080050b8
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	200000d8 	.word	0x200000d8

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff2 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	0800515c 	.word	0x0800515c

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	0800515c 	.word	0x0800515c

08001d4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	220f      	movs	r2, #15
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0207 	and.w	r2, r3, #7
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40022000 	.word	0x40022000

08001dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <RCC_Delay+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <RCC_Delay+0x38>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc8:	bf00      	nop
  }
  while (Delay --);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <RCC_Delay+0x1c>
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	200000d8 	.word	0x200000d8
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e041      	b.n	8001e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f839 	bl	8001e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3304      	adds	r3, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f000 f9b4 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d001      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e03a      	b.n	8001f26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_TIM_Base_Start_IT+0x98>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x58>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eda:	d009      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x58>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x58>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <HAL_TIM_Base_Start_IT+0xa0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d010      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	e007      	b.n	8001f24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800

08001f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0202 	mvn.w	r2, #2
 8001f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8ed 	bl	800215e <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8e0 	bl	800214c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8ef 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0204 	mvn.w	r2, #4
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8c3 	bl	800215e <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8b6 	bl	800214c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8c5 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b08      	cmp	r3, #8
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0208 	mvn.w	r2, #8
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f899 	bl	800215e <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f88c 	bl	800214c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f89b 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b10      	cmp	r3, #16
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b10      	cmp	r3, #16
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0210 	mvn.w	r2, #16
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2208      	movs	r2, #8
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f86f 	bl	800215e <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f862 	bl	800214c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f871 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10e      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0201 	mvn.w	r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fb5e 	bl	800077c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b80      	cmp	r3, #128	; 0x80
 80020cc:	d10e      	bne.n	80020ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d107      	bne.n	80020ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8bf 	bl	800226a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d10e      	bne.n	8002118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d107      	bne.n	8002118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f835 	bl	8002182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b20      	cmp	r3, #32
 8002132:	d107      	bne.n	8002144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0220 	mvn.w	r2, #32
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f88a 	bl	8002258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a29      	ldr	r2, [pc, #164]	; (800224c <TIM_Base_SetConfig+0xb8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00b      	beq.n	80021c4 <TIM_Base_SetConfig+0x30>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d007      	beq.n	80021c4 <TIM_Base_SetConfig+0x30>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a26      	ldr	r2, [pc, #152]	; (8002250 <TIM_Base_SetConfig+0xbc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_Base_SetConfig+0x30>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <TIM_Base_SetConfig+0xc0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <TIM_Base_SetConfig+0xb8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <TIM_Base_SetConfig+0x62>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0x62>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <TIM_Base_SetConfig+0xbc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0x62>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <TIM_Base_SetConfig+0xc0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d108      	bne.n	8002208 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <TIM_Base_SetConfig+0xb8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d103      	bne.n	800223c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	615a      	str	r2, [r3, #20]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800

08002258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03f      	b.n	800230e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fb5c 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f829 	bl	8002318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002352:	f023 030c 	bic.w	r3, r3, #12
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	430b      	orrs	r3, r1
 800235e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2c      	ldr	r2, [pc, #176]	; (800242c <UART_SetConfig+0x114>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d103      	bne.n	8002388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002380:	f7ff fcd0 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	e002      	b.n	800238e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002388:	f7ff fcb8 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 800238c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009a      	lsls	r2, r3, #2
 8002398:	441a      	add	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	4a22      	ldr	r2, [pc, #136]	; (8002430 <UART_SetConfig+0x118>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	0119      	lsls	r1, r3, #4
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009a      	lsls	r2, r3, #2
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <UART_SetConfig+0x118>)
 80023c6:	fba3 0302 	umull	r0, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2064      	movs	r0, #100	; 0x64
 80023ce:	fb00 f303 	mul.w	r3, r0, r3
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	3332      	adds	r3, #50	; 0x32
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <UART_SetConfig+0x118>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e4:	4419      	add	r1, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009a      	lsls	r2, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <UART_SetConfig+0x118>)
 80023fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2064      	movs	r0, #100	; 0x64
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	3332      	adds	r3, #50	; 0x32
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <UART_SetConfig+0x118>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	440a      	add	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013800 	.word	0x40013800
 8002430:	51eb851f 	.word	0x51eb851f

08002434 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800243a:	f3ef 8305 	mrs	r3, IPSR
 800243e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002440:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002446:	f3ef 8310 	mrs	r3, PRIMASK
 800244a:	607b      	str	r3, [r7, #4]
  return(result);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <osKernelInitialize+0x32>
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <osKernelInitialize+0x60>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d109      	bne.n	800246e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800245a:	f3ef 8311 	mrs	r3, BASEPRI
 800245e:	603b      	str	r3, [r7, #0]
  return(result);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002466:	f06f 0305 	mvn.w	r3, #5
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e00c      	b.n	8002488 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <osKernelInitialize+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <osKernelInitialize+0x60>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e002      	b.n	8002488 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	2000023c 	.word	0x2000023c

08002498 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800249e:	f001 fd35 	bl	8003f0c <xTaskGetSchedulerState>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <osKernelGetState+0x1a>
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d105      	bne.n	80024b8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80024ac:	2302      	movs	r3, #2
 80024ae:	607b      	str	r3, [r7, #4]
      break;
 80024b0:	e00c      	b.n	80024cc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80024b2:	2303      	movs	r3, #3
 80024b4:	607b      	str	r3, [r7, #4]
      break;
 80024b6:	e009      	b.n	80024cc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <osKernelGetState+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <osKernelGetState+0x2e>
        state = osKernelReady;
 80024c0:	2301      	movs	r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80024c4:	e001      	b.n	80024ca <osKernelGetState+0x32>
        state = osKernelInactive;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
      break;
 80024ca:	bf00      	nop
  }

  return (state);
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000023c 	.word	0x2000023c

080024dc <osKernelStart>:

osStatus_t osKernelStart (void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e2:	f3ef 8305 	mrs	r3, IPSR
 80024e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80024e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ee:	f3ef 8310 	mrs	r3, PRIMASK
 80024f2:	607b      	str	r3, [r7, #4]
  return(result);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <osKernelStart+0x32>
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <osKernelStart+0x64>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d109      	bne.n	8002516 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002502:	f3ef 8311 	mrs	r3, BASEPRI
 8002506:	603b      	str	r3, [r7, #0]
  return(result);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <osKernelStart+0x3a>
    stat = osErrorISR;
 800250e:	f06f 0305 	mvn.w	r3, #5
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e00e      	b.n	8002534 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <osKernelStart+0x64>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <osKernelStart+0x64>)
 8002520:	2202      	movs	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002524:	f001 f890 	bl	8003648 <vTaskStartScheduler>
      stat = osOK;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e002      	b.n	8002534 <osKernelStart+0x58>
    } else {
      stat = osError;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000023c 	.word	0x2000023c

08002544 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b092      	sub	sp, #72	; 0x48
 8002548:	af04      	add	r7, sp, #16
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002554:	f3ef 8305 	mrs	r3, IPSR
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8094 	bne.w	800268a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002562:	f3ef 8310 	mrs	r3, PRIMASK
 8002566:	623b      	str	r3, [r7, #32]
  return(result);
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 808d 	bne.w	800268a <osThreadNew+0x146>
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <osThreadNew+0x150>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d106      	bne.n	8002586 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002578:	f3ef 8311 	mrs	r3, BASEPRI
 800257c:	61fb      	str	r3, [r7, #28]
  return(result);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 8082 	bne.w	800268a <osThreadNew+0x146>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d07e      	beq.n	800268a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002590:	2318      	movs	r3, #24
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002594:	2300      	movs	r3, #0
 8002596:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002598:	f107 031b 	add.w	r3, r7, #27
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d045      	beq.n	8002636 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <osThreadNew+0x74>
        name = attr->name;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <osThreadNew+0x9a>
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	2b38      	cmp	r3, #56	; 0x38
 80025d0:	d805      	bhi.n	80025de <osThreadNew+0x9a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <osThreadNew+0x9e>
        return (NULL);
 80025de:	2300      	movs	r3, #0
 80025e0:	e054      	b.n	800268c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00e      	beq.n	8002618 <osThreadNew+0xd4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2bbb      	cmp	r3, #187	; 0xbb
 8002600:	d90a      	bls.n	8002618 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <osThreadNew+0xd4>
        mem = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
 8002616:	e010      	b.n	800263a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10c      	bne.n	800263a <osThreadNew+0xf6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <osThreadNew+0xf6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <osThreadNew+0xf6>
          mem = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
 8002634:	e001      	b.n	800263a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	2b01      	cmp	r3, #1
 800263e:	d110      	bne.n	8002662 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002648:	9202      	str	r2, [sp, #8]
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002654:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fe12 	bl	8003280 <xTaskCreateStatic>
 800265c:	4603      	mov	r3, r0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e013      	b.n	800268a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d110      	bne.n	800268a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	b29a      	uxth	r2, r3
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fe5c 	bl	8003338 <xTaskCreate>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <osThreadNew+0x146>
          hTask = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800268a:	697b      	ldr	r3, [r7, #20]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3738      	adds	r7, #56	; 0x38
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000023c 	.word	0x2000023c

08002698 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a0:	f3ef 8305 	mrs	r3, IPSR
 80026a4:	613b      	str	r3, [r7, #16]
  return(result);
 80026a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ac:	f3ef 8310 	mrs	r3, PRIMASK
 80026b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <osDelay+0x34>
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <osDelay+0x58>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d109      	bne.n	80026d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026c0:	f3ef 8311 	mrs	r3, BASEPRI
 80026c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <osDelay+0x3c>
    stat = osErrorISR;
 80026cc:	f06f 0305 	mvn.w	r3, #5
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e007      	b.n	80026e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 ff7e 	bl	80035e0 <vTaskDelay>
    }
  }

  return (stat);
 80026e4:	697b      	ldr	r3, [r7, #20]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000023c 	.word	0x2000023c

080026f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a06      	ldr	r2, [pc, #24]	; (800271c <vApplicationGetIdleTaskMemory+0x28>)
 8002704:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <vApplicationGetIdleTaskMemory+0x2c>)
 800270a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	601a      	str	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	20000240 	.word	0x20000240
 8002720:	200002fc 	.word	0x200002fc

08002724 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <vApplicationGetTimerTaskMemory+0x2c>)
 8002734:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <vApplicationGetTimerTaskMemory+0x30>)
 800273a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200004fc 	.word	0x200004fc
 8002754:	200005b8 	.word	0x200005b8

08002758 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f103 0208 	add.w	r2, r3, #8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f103 0208 	add.w	r2, r3, #8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0208 	add.w	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d103      	bne.n	8002814 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e00c      	b.n	800282e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3308      	adds	r3, #8
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e002      	b.n	8002822 <vListInsert+0x2e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d2f6      	bcs.n	800281c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6852      	ldr	r2, [r2, #4]
 8002884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d103      	bne.n	8002898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028e2:	f001 fff3 	bl	80048cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	441a      	add	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	3b01      	subs	r3, #1
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	441a      	add	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d114      	bne.n	8002962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01a      	beq.n	8002976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3310      	adds	r3, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f001 f91b 	bl	8003b80 <xTaskRemoveFromEventList>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <xQueueGenericReset+0xcc>)
 8002952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	e009      	b.n	8002976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3310      	adds	r3, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fef6 	bl	8002758 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3324      	adds	r3, #36	; 0x24
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fef1 	bl	8002758 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002976:	f001 ffd9 	bl	800492c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	e000ed04 	.word	0xe000ed04

08002988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ca:	bf00      	nop
 80029cc:	e7fe      	b.n	80029cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <xQueueGenericCreateStatic+0x52>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <xQueueGenericCreateStatic+0x56>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueGenericCreateStatic+0x58>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	623b      	str	r3, [r7, #32]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <xQueueGenericCreateStatic+0x7e>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <xQueueGenericCreateStatic+0x82>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <xQueueGenericCreateStatic+0x84>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61fb      	str	r3, [r7, #28]
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a26:	2350      	movs	r3, #80	; 0x50
 8002a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b50      	cmp	r3, #80	; 0x50
 8002a2e:	d00a      	beq.n	8002a46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	61bb      	str	r3, [r7, #24]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a58:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f805 	bl	8002a76 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3730      	adds	r7, #48	; 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e002      	b.n	8002a98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	69b8      	ldr	r0, [r7, #24]
 8002aa8:	f7ff ff06 	bl	80028b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08e      	sub	sp, #56	; 0x38
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSend+0x32>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <xQueueGenericSend+0x40>
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <xQueueGenericSend+0x44>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <xQueueGenericSend+0x46>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <xQueueGenericSend+0x60>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d103      	bne.n	8002b2a <xQueueGenericSend+0x6e>
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <xQueueGenericSend+0x72>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericSend+0x74>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b4a:	f001 f9df 	bl	8003f0c <xTaskGetSchedulerState>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <xQueueGenericSend+0x9e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericSend+0xa2>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericSend+0xa4>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericSend+0xbe>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61fb      	str	r3, [r7, #28]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b7a:	f001 fea7 	bl	80048cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <xQueueGenericSend+0xd4>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d129      	bne.n	8002be4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b96:	f000 fa07 	bl	8002fa8 <prvCopyDataToQueue>
 8002b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 ffe9 	bl	8003b80 <xTaskRemoveFromEventList>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <xQueueGenericSend+0x1f8>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	e00a      	b.n	8002bdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <xQueueGenericSend+0x1f8>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bdc:	f001 fea6 	bl	800492c <vPortExitCritical>
				return pdPASS;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e063      	b.n	8002cac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bea:	f001 fe9f 	bl	800492c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e05c      	b.n	8002cac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 f823 	bl	8003c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c06:	f001 fe91 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c0a:	f000 fd8d 	bl	8003728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c0e:	f001 fe5d 	bl	80048cc <vPortEnterCritical>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d103      	bne.n	8002c28 <xQueueGenericSend+0x16c>
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x182>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c3e:	f001 fe75 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c42:	1d3a      	adds	r2, r7, #4
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f812 	bl	8003c74 <xTaskCheckForTimeOut>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d124      	bne.n	8002ca0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c58:	f000 fa9e 	bl	8003198 <prvIsQueueFull>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	3310      	adds	r3, #16
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 ff38 	bl	8003ae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c72:	f000 fa29 	bl	80030c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c76:	f000 fd65 	bl	8003744 <xTaskResumeAll>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f af7c 	bne.w	8002b7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <xQueueGenericSend+0x1f8>)
 8002c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	e772      	b.n	8002b7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fa17 	bl	80030c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c9a:	f000 fd53 	bl	8003744 <xTaskResumeAll>
 8002c9e:	e76c      	b.n	8002b7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca2:	f000 fa11 	bl	80030c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ca6:	f000 fd4d 	bl	8003744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002caa:	2300      	movs	r3, #0
		}
	}
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	; 0x38
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <xQueueGenericSendFromISR+0x3c>
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <xQueueGenericSendFromISR+0x40>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <xQueueGenericSendFromISR+0x42>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	623b      	str	r3, [r7, #32]
}
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSendFromISR+0x6a>
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <xQueueGenericSendFromISR+0x6e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueGenericSendFromISR+0x70>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	61fb      	str	r3, [r7, #28]
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f001 fe85 	bl	8004a50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d46:	f3ef 8211 	mrs	r2, BASEPRI
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	61ba      	str	r2, [r7, #24]
 8002d5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <xQueueGenericSendFromISR+0xbc>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d12c      	bne.n	8002dce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d84:	f000 f910 	bl	8002fa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d112      	bne.n	8002db8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	3324      	adds	r3, #36	; 0x24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 feee 	bl	8003b80 <xTaskRemoveFromEventList>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00e      	beq.n	8002dc8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e007      	b.n	8002dc8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002db8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	b25a      	sxtb	r2, r3
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002dcc:	e001      	b.n	8002dd2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ddc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3738      	adds	r7, #56	; 0x38
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <xQueueReceive+0x30>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	623b      	str	r3, [r7, #32]
}
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <xQueueReceive+0x3e>
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <xQueueReceive+0x42>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueReceive+0x44>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <xQueueReceive+0x5e>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61fb      	str	r3, [r7, #28]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e46:	f001 f861 	bl	8003f0c <xTaskGetSchedulerState>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <xQueueReceive+0x6e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <xQueueReceive+0x72>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueReceive+0x74>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xQueueReceive+0x8e>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	61bb      	str	r3, [r7, #24]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e76:	f001 fd29 	bl	80048cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01f      	beq.n	8002ec6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e8a:	f000 f8f7 	bl	800307c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1e5a      	subs	r2, r3, #1
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00f      	beq.n	8002ebe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fe6c 	bl	8003b80 <xTaskRemoveFromEventList>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <xQueueReceive+0x1bc>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ebe:	f001 fd35 	bl	800492c <vPortExitCritical>
				return pdPASS;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e069      	b.n	8002f9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ecc:	f001 fd2e 	bl	800492c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e062      	b.n	8002f9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 feb2 	bl	8003c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ee8:	f001 fd20 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eec:	f000 fc1c 	bl	8003728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ef0:	f001 fcec 	bl	80048cc <vPortEnterCritical>
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d103      	bne.n	8002f0a <xQueueReceive+0x122>
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d103      	bne.n	8002f20 <xQueueReceive+0x138>
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f20:	f001 fd04 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f24:	1d3a      	adds	r2, r7, #4
 8002f26:	f107 0310 	add.w	r3, r7, #16
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fea1 	bl	8003c74 <xTaskCheckForTimeOut>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d123      	bne.n	8002f80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3a:	f000 f917 	bl	800316c <prvIsQueueEmpty>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	3324      	adds	r3, #36	; 0x24
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fdc7 	bl	8003ae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f54:	f000 f8b8 	bl	80030c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f58:	f000 fbf4 	bl	8003744 <xTaskResumeAll>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d189      	bne.n	8002e76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <xQueueReceive+0x1bc>)
 8002f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	e780      	b.n	8002e76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f76:	f000 f8a7 	bl	80030c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f7a:	f000 fbe3 	bl	8003744 <xTaskResumeAll>
 8002f7e:	e77a      	b.n	8002e76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f82:	f000 f8a1 	bl	80030c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f86:	f000 fbdd 	bl	8003744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8c:	f000 f8ee 	bl	800316c <prvIsQueueEmpty>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f43f af6f 	beq.w	8002e76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3730      	adds	r7, #48	; 0x30
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d14d      	bne.n	800306a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 ffb8 	bl	8003f48 <xTaskPriorityDisinherit>
 8002fd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	e043      	b.n	800306a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d119      	bne.n	800301c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6898      	ldr	r0, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	f001 ff68 	bl	8004ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d32b      	bcc.n	800306a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	e026      	b.n	800306a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68d8      	ldr	r0, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	461a      	mov	r2, r3
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	f001 ff4e 	bl	8004ec8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	425b      	negs	r3, r3
 8003036:	441a      	add	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d207      	bcs.n	8003058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	425b      	negs	r3, r3
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d105      	bne.n	800306a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	3b01      	subs	r3, #1
 8003068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003072:	697b      	ldr	r3, [r7, #20]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	441a      	add	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d303      	bcc.n	80030b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	461a      	mov	r2, r3
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	f001 ff04 	bl	8004ec8 <memcpy>
	}
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030d0:	f001 fbfc 	bl	80048cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030dc:	e011      	b.n	8003102 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d012      	beq.n	800310c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3324      	adds	r3, #36	; 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd48 	bl	8003b80 <xTaskRemoveFromEventList>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030f6:	f000 fe1f 	bl	8003d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dce9      	bgt.n	80030de <prvUnlockQueue+0x16>
 800310a:	e000      	b.n	800310e <prvUnlockQueue+0x46>
					break;
 800310c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	22ff      	movs	r2, #255	; 0xff
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003116:	f001 fc09 	bl	800492c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800311a:	f001 fbd7 	bl	80048cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003124:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003126:	e011      	b.n	800314c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3310      	adds	r3, #16
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fd23 	bl	8003b80 <xTaskRemoveFromEventList>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003140:	f000 fdfa 	bl	8003d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	3b01      	subs	r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800314c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003150:	2b00      	cmp	r3, #0
 8003152:	dce9      	bgt.n	8003128 <prvUnlockQueue+0x60>
 8003154:	e000      	b.n	8003158 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003156:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	22ff      	movs	r2, #255	; 0xff
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003160:	f001 fbe4 	bl	800492c <vPortExitCritical>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003174:	f001 fbaa 	bl	80048cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003180:	2301      	movs	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e001      	b.n	800318a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800318a:	f001 fbcf 	bl	800492c <vPortExitCritical>

	return xReturn;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031a0:	f001 fb94 	bl	80048cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d102      	bne.n	80031b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031b0:	2301      	movs	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e001      	b.n	80031ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ba:	f001 fbb7 	bl	800492c <vPortExitCritical>

	return xReturn;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e014      	b.n	8003202 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <vQueueAddToRegistry+0x4c>)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031e4:	490b      	ldr	r1, [pc, #44]	; (8003214 <vQueueAddToRegistry+0x4c>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <vQueueAddToRegistry+0x4c>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031fa:	e006      	b.n	800320a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b07      	cmp	r3, #7
 8003206:	d9e7      	bls.n	80031d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	200009b8 	.word	0x200009b8

08003218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003228:	f001 fb50 	bl	80048cc <vPortEnterCritical>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <vQueueWaitForMessageRestricted+0x2a>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d103      	bne.n	8003258 <vQueueWaitForMessageRestricted+0x40>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003258:	f001 fb68 	bl	800492c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3324      	adds	r3, #36	; 0x24
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fc5b 	bl	8003b28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff28 	bl	80030c8 <prvUnlockQueue>
	}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	; 0x38
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	623b      	str	r3, [r7, #32]
}
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61fb      	str	r3, [r7, #28]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032c6:	23bc      	movs	r3, #188	; 0xbc
 80032c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2bbc      	cmp	r3, #188	; 0xbc
 80032ce:	d00a      	beq.n	80032e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	61bb      	str	r3, [r7, #24]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01e      	beq.n	800332a <xTaskCreateStatic+0xaa>
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01b      	beq.n	800332a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003304:	2300      	movs	r3, #0
 8003306:	9303      	str	r3, [sp, #12]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f851 	bl	80033c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003324:	f000 f8ec 	bl	8003500 <prvAddNewTaskToReadyList>
 8003328:	e001      	b.n	800332e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800332e:	697b      	ldr	r3, [r7, #20]
	}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	; 0x30
 800333c:	af04      	add	r7, sp, #16
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fbbd 	bl	8004acc <pvPortMalloc>
 8003352:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800335a:	20bc      	movs	r0, #188	; 0xbc
 800335c:	f001 fbb6 	bl	8004acc <pvPortMalloc>
 8003360:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
 800336e:	e005      	b.n	800337c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f001 fc6f 	bl	8004c54 <vPortFree>
 8003376:	e001      	b.n	800337c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d017      	beq.n	80033b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	2300      	movs	r3, #0
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f80f 	bl	80033c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033a6:	69f8      	ldr	r0, [r7, #28]
 80033a8:	f000 f8aa 	bl	8003500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033ac:	2301      	movs	r3, #1
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	e002      	b.n	80033b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033b8:	69bb      	ldr	r3, [r7, #24]
	}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	21a5      	movs	r1, #165	; 0xa5
 80033de:	f001 fd81 	bl	8004ee4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033ec:	3b01      	subs	r3, #1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	617b      	str	r3, [r7, #20]
}
 8003418:	bf00      	nop
 800341a:	e7fe      	b.n	800341a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e012      	b.n	8003448 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	7819      	ldrb	r1, [r3, #0]
 800342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	3334      	adds	r3, #52	; 0x34
 8003432:	460a      	mov	r2, r1
 8003434:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d9e9      	bls.n	8003422 <prvInitialiseNewTask+0x5e>
 800344e:	e000      	b.n	8003452 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003450:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	2b37      	cmp	r3, #55	; 0x37
 800345e:	d901      	bls.n	8003464 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003460:	2337      	movs	r3, #55	; 0x37
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	2200      	movs	r2, #0
 8003474:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	3304      	adds	r3, #4
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff f98b 	bl	8002796 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	3318      	adds	r3, #24
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f986 	bl	8002796 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	3354      	adds	r3, #84	; 0x54
 80034b4:	2260      	movs	r2, #96	; 0x60
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fd13 	bl	8004ee4 <memset>
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <prvInitialiseNewTask+0x130>)
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <prvInitialiseNewTask+0x134>)
 80034c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <prvInitialiseNewTask+0x138>)
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	69b8      	ldr	r0, [r7, #24]
 80034d6:	f001 f90b 	bl	80046f0 <pxPortInitialiseStack>
 80034da:	4602      	mov	r2, r0
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80034e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	08005184 	.word	0x08005184
 80034f8:	080051a4 	.word	0x080051a4
 80034fc:	08005164 	.word	0x08005164

08003500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003508:	f001 f9e0 	bl	80048cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <prvAddNewTaskToReadyList+0xc4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <prvAddNewTaskToReadyList+0xc4>)
 8003514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003516:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <prvAddNewTaskToReadyList+0xc8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <prvAddNewTaskToReadyList+0xc8>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <prvAddNewTaskToReadyList+0xc4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d110      	bne.n	800354e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800352c:	f000 fc28 	bl	8003d80 <prvInitialiseTaskLists>
 8003530:	e00d      	b.n	800354e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <prvAddNewTaskToReadyList+0xcc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800353a:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <prvAddNewTaskToReadyList+0xc8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d802      	bhi.n	800354e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003548:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <prvAddNewTaskToReadyList+0xc8>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <prvAddNewTaskToReadyList+0xd0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <prvAddNewTaskToReadyList+0xd0>)
 8003556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <prvAddNewTaskToReadyList+0xd0>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <prvAddNewTaskToReadyList+0xd4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d903      	bls.n	8003574 <prvAddNewTaskToReadyList+0x74>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <prvAddNewTaskToReadyList+0xd4>)
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <prvAddNewTaskToReadyList+0xd8>)
 8003582:	441a      	add	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f7ff f90f 	bl	80027ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003590:	f001 f9cc 	bl	800492c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <prvAddNewTaskToReadyList+0xcc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <prvAddNewTaskToReadyList+0xc8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d207      	bcs.n	80035ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <prvAddNewTaskToReadyList+0xdc>)
 80035ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000ecc 	.word	0x20000ecc
 80035c8:	200009f8 	.word	0x200009f8
 80035cc:	20000ed8 	.word	0x20000ed8
 80035d0:	20000ee8 	.word	0x20000ee8
 80035d4:	20000ed4 	.word	0x20000ed4
 80035d8:	200009fc 	.word	0x200009fc
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d017      	beq.n	8003622 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <vTaskDelay+0x60>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <vTaskDelay+0x30>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	60bb      	str	r3, [r7, #8]
}
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003610:	f000 f88a 	bl	8003728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fd04 	bl	8004024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800361c:	f000 f892 	bl	8003744 <xTaskResumeAll>
 8003620:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <vTaskDelay+0x64>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000ef4 	.word	0x20000ef4
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003656:	463a      	mov	r2, r7
 8003658:	1d39      	adds	r1, r7, #4
 800365a:	f107 0308 	add.w	r3, r7, #8
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f848 	bl	80026f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	9202      	str	r2, [sp, #8]
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2300      	movs	r3, #0
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	460a      	mov	r2, r1
 8003676:	4924      	ldr	r1, [pc, #144]	; (8003708 <vTaskStartScheduler+0xc0>)
 8003678:	4824      	ldr	r0, [pc, #144]	; (800370c <vTaskStartScheduler+0xc4>)
 800367a:	f7ff fe01 	bl	8003280 <xTaskCreateStatic>
 800367e:	4603      	mov	r3, r0
 8003680:	4a23      	ldr	r2, [pc, #140]	; (8003710 <vTaskStartScheduler+0xc8>)
 8003682:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <vTaskStartScheduler+0xc8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e001      	b.n	8003696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d102      	bne.n	80036a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800369c:	f000 fd16 	bl	80040cc <xTimerCreateTimerTask>
 80036a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d11b      	bne.n	80036e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	613b      	str	r3, [r7, #16]
}
 80036ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <vTaskStartScheduler+0xcc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3354      	adds	r3, #84	; 0x54
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <vTaskStartScheduler+0xd0>)
 80036c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <vTaskStartScheduler+0xd4>)
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <vTaskStartScheduler+0xd8>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <vTaskStartScheduler+0xdc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036da:	f001 f885 	bl	80047e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036de:	e00e      	b.n	80036fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d10a      	bne.n	80036fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60fb      	str	r3, [r7, #12]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <vTaskStartScheduler+0xb4>
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	080050c8 	.word	0x080050c8
 800370c:	08003d51 	.word	0x08003d51
 8003710:	20000ef0 	.word	0x20000ef0
 8003714:	200009f8 	.word	0x200009f8
 8003718:	200000ec 	.word	0x200000ec
 800371c:	20000eec 	.word	0x20000eec
 8003720:	20000ed8 	.word	0x20000ed8
 8003724:	20000ed0 	.word	0x20000ed0

08003728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <vTaskSuspendAll+0x18>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a03      	ldr	r2, [pc, #12]	; (8003740 <vTaskSuspendAll+0x18>)
 8003734:	6013      	str	r3, [r2, #0]
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000ef4 	.word	0x20000ef4

08003744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <xTaskResumeAll+0x118>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <xTaskResumeAll+0x2c>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	603b      	str	r3, [r7, #0]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003770:	f001 f8ac 	bl	80048cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <xTaskResumeAll+0x118>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	4a38      	ldr	r2, [pc, #224]	; (800385c <xTaskResumeAll+0x118>)
 800377c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <xTaskResumeAll+0x118>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d162      	bne.n	800384c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <xTaskResumeAll+0x11c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d05e      	beq.n	800384c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800378e:	e02f      	b.n	80037f0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <xTaskResumeAll+0x120>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3318      	adds	r3, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f861 	bl	8002864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f85c 	bl	8002864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <xTaskResumeAll+0x124>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d903      	bls.n	80037c0 <xTaskResumeAll+0x7c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <xTaskResumeAll+0x124>)
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <xTaskResumeAll+0x128>)
 80037ce:	441a      	add	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f7fe ffe9 	bl	80027ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <xTaskResumeAll+0x12c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <xTaskResumeAll+0x130>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xTaskResumeAll+0x120>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1cb      	bne.n	8003790 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037fe:	f000 fb61 	bl	8003ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <xTaskResumeAll+0x134>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800380e:	f000 f845 	bl	800389c <xTaskIncrementTick>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <xTaskResumeAll+0x130>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3b01      	subs	r3, #1
 8003822:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f1      	bne.n	800380e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <xTaskResumeAll+0x134>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <xTaskResumeAll+0x130>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <xTaskResumeAll+0x138>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800384c:	f001 f86e 	bl	800492c <vPortExitCritical>

	return xAlreadyYielded;
 8003850:	68bb      	ldr	r3, [r7, #8]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000ef4 	.word	0x20000ef4
 8003860:	20000ecc 	.word	0x20000ecc
 8003864:	20000e8c 	.word	0x20000e8c
 8003868:	20000ed4 	.word	0x20000ed4
 800386c:	200009fc 	.word	0x200009fc
 8003870:	200009f8 	.word	0x200009f8
 8003874:	20000ee0 	.word	0x20000ee0
 8003878:	20000edc 	.word	0x20000edc
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <xTaskGetTickCount+0x18>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000ed0 	.word	0x20000ed0

0800389c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a6:	4b51      	ldr	r3, [pc, #324]	; (80039ec <xTaskIncrementTick+0x150>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 808e 	bne.w	80039cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <xTaskIncrementTick+0x154>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <xTaskIncrementTick+0x154>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d120      	bne.n	8003906 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <xTaskIncrementTick+0x158>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	603b      	str	r3, [r7, #0]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <xTaskIncrementTick+0x46>
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <xTaskIncrementTick+0x158>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <xTaskIncrementTick+0x15c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a41      	ldr	r2, [pc, #260]	; (80039f4 <xTaskIncrementTick+0x158>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4a41      	ldr	r2, [pc, #260]	; (80039f8 <xTaskIncrementTick+0x15c>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b40      	ldr	r3, [pc, #256]	; (80039fc <xTaskIncrementTick+0x160>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <xTaskIncrementTick+0x160>)
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	f000 fadf 	bl	8003ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <xTaskIncrementTick+0x164>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d34e      	bcc.n	80039ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003910:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <xTaskIncrementTick+0x158>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <xTaskIncrementTick+0x82>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <xTaskIncrementTick+0x84>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003924:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <xTaskIncrementTick+0x164>)
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	601a      	str	r2, [r3, #0]
					break;
 800392c:	e03f      	b.n	80039ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <xTaskIncrementTick+0x158>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d203      	bcs.n	800394e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003946:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <xTaskIncrementTick+0x164>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6013      	str	r3, [r2, #0]
						break;
 800394c:	e02f      	b.n	80039ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3304      	adds	r3, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe ff86 	bl	8002864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3318      	adds	r3, #24
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe ff7d 	bl	8002864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <xTaskIncrementTick+0x168>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d903      	bls.n	800397e <xTaskIncrementTick+0xe2>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <xTaskIncrementTick+0x168>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <xTaskIncrementTick+0x16c>)
 800398c:	441a      	add	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe ff0a 	bl	80027ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <xTaskIncrementTick+0x170>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3b3      	bcc.n	8003910 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ac:	e7b0      	b.n	8003910 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <xTaskIncrementTick+0x170>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4914      	ldr	r1, [pc, #80]	; (8003a08 <xTaskIncrementTick+0x16c>)
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d907      	bls.n	80039d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e004      	b.n	80039d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <xTaskIncrementTick+0x174>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <xTaskIncrementTick+0x174>)
 80039d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <xTaskIncrementTick+0x178>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000ef4 	.word	0x20000ef4
 80039f0:	20000ed0 	.word	0x20000ed0
 80039f4:	20000e84 	.word	0x20000e84
 80039f8:	20000e88 	.word	0x20000e88
 80039fc:	20000ee4 	.word	0x20000ee4
 8003a00:	20000eec 	.word	0x20000eec
 8003a04:	20000ed4 	.word	0x20000ed4
 8003a08:	200009fc 	.word	0x200009fc
 8003a0c:	200009f8 	.word	0x200009f8
 8003a10:	20000edc 	.word	0x20000edc
 8003a14:	20000ee0 	.word	0x20000ee0

08003a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <vTaskSwitchContext+0xb0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <vTaskSwitchContext+0xb4>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a2c:	e046      	b.n	8003abc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003a2e:	4b27      	ldr	r3, [pc, #156]	; (8003acc <vTaskSwitchContext+0xb4>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <vTaskSwitchContext+0xb8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e010      	b.n	8003a5e <vTaskSwitchContext+0x46>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <vTaskSwitchContext+0x3e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	491d      	ldr	r1, [pc, #116]	; (8003ad4 <vTaskSwitchContext+0xbc>)
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0e4      	beq.n	8003a3c <vTaskSwitchContext+0x24>
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <vTaskSwitchContext+0xbc>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3308      	adds	r3, #8
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d104      	bne.n	8003aa2 <vTaskSwitchContext+0x8a>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <vTaskSwitchContext+0xc0>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <vTaskSwitchContext+0xb8>)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <vTaskSwitchContext+0xc0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3354      	adds	r3, #84	; 0x54
 8003ab8:	4a08      	ldr	r2, [pc, #32]	; (8003adc <vTaskSwitchContext+0xc4>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000ef4 	.word	0x20000ef4
 8003acc:	20000ee0 	.word	0x20000ee0
 8003ad0:	20000ed4 	.word	0x20000ed4
 8003ad4:	200009fc 	.word	0x200009fc
 8003ad8:	200009f8 	.word	0x200009f8
 8003adc:	200000ec 	.word	0x200000ec

08003ae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	60fb      	str	r3, [r7, #12]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <vTaskPlaceOnEventList+0x44>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3318      	adds	r3, #24
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe fe70 	bl	80027f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b14:	2101      	movs	r1, #1
 8003b16:	6838      	ldr	r0, [r7, #0]
 8003b18:	f000 fa84 	bl	8004024 <prvAddCurrentTaskToDelayedList>
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200009f8 	.word	0x200009f8

08003b28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	617b      	str	r3, [r7, #20]
}
 8003b4c:	bf00      	nop
 8003b4e:	e7fe      	b.n	8003b4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <vTaskPlaceOnEventListRestricted+0x54>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3318      	adds	r3, #24
 8003b56:	4619      	mov	r1, r3
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7fe fe28 	bl	80027ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	68b8      	ldr	r0, [r7, #8]
 8003b6e:	f000 fa59 	bl	8004024 <prvAddCurrentTaskToDelayedList>
	}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200009f8 	.word	0x200009f8

08003b80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60fb      	str	r3, [r7, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3318      	adds	r3, #24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fe57 	bl	8002864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <xTaskRemoveFromEventList+0xb0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11d      	bne.n	8003bfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fe4e 	bl	8002864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <xTaskRemoveFromEventList+0xb4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <xTaskRemoveFromEventList+0x5c>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <xTaskRemoveFromEventList+0xb4>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <xTaskRemoveFromEventList+0xb8>)
 8003bea:	441a      	add	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe fddb 	bl	80027ae <vListInsertEnd>
 8003bf8:	e005      	b.n	8003c06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	4619      	mov	r1, r3
 8003c00:	480e      	ldr	r0, [pc, #56]	; (8003c3c <xTaskRemoveFromEventList+0xbc>)
 8003c02:	f7fe fdd4 	bl	80027ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <xTaskRemoveFromEventList+0xc0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d905      	bls.n	8003c20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <xTaskRemoveFromEventList+0xc4>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e001      	b.n	8003c24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003c24:	697b      	ldr	r3, [r7, #20]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000ef4 	.word	0x20000ef4
 8003c34:	20000ed4 	.word	0x20000ed4
 8003c38:	200009fc 	.word	0x200009fc
 8003c3c:	20000e8c 	.word	0x20000e8c
 8003c40:	200009f8 	.word	0x200009f8
 8003c44:	20000ee0 	.word	0x20000ee0

08003c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <vTaskInternalSetTimeOutState+0x24>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <vTaskInternalSetTimeOutState+0x28>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000ee4 	.word	0x20000ee4
 8003c70:	20000ed0 	.word	0x20000ed0

08003c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	613b      	str	r3, [r7, #16]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60fb      	str	r3, [r7, #12]
}
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cb6:	f000 fe09 	bl	80048cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <xTaskCheckForTimeOut+0xbc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d102      	bne.n	8003cda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e023      	b.n	8003d22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <xTaskCheckForTimeOut+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d007      	beq.n	8003cf6 <xTaskCheckForTimeOut+0x82>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e015      	b.n	8003d22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d20b      	bcs.n	8003d18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff9b 	bl	8003c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e004      	b.n	8003d22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d22:	f000 fe03 	bl	800492c <vPortExitCritical>

	return xReturn;
 8003d26:	69fb      	ldr	r3, [r7, #28]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000ed0 	.word	0x20000ed0
 8003d34:	20000ee4 	.word	0x20000ee4

08003d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <vTaskMissedYield+0x14>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000ee0 	.word	0x20000ee0

08003d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d58:	f000 f852 	bl	8003e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <prvIdleTask+0x28>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d9f9      	bls.n	8003d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <prvIdleTask+0x2c>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d74:	e7f0      	b.n	8003d58 <prvIdleTask+0x8>
 8003d76:	bf00      	nop
 8003d78:	200009fc 	.word	0x200009fc
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	e00c      	b.n	8003da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <prvInitialiseTaskLists+0x60>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fcdc 	bl	8002758 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3301      	adds	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b37      	cmp	r3, #55	; 0x37
 8003daa:	d9ef      	bls.n	8003d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dac:	480d      	ldr	r0, [pc, #52]	; (8003de4 <prvInitialiseTaskLists+0x64>)
 8003dae:	f7fe fcd3 	bl	8002758 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003db2:	480d      	ldr	r0, [pc, #52]	; (8003de8 <prvInitialiseTaskLists+0x68>)
 8003db4:	f7fe fcd0 	bl	8002758 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <prvInitialiseTaskLists+0x6c>)
 8003dba:	f7fe fccd 	bl	8002758 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dbe:	480c      	ldr	r0, [pc, #48]	; (8003df0 <prvInitialiseTaskLists+0x70>)
 8003dc0:	f7fe fcca 	bl	8002758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dc4:	480b      	ldr	r0, [pc, #44]	; (8003df4 <prvInitialiseTaskLists+0x74>)
 8003dc6:	f7fe fcc7 	bl	8002758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <prvInitialiseTaskLists+0x78>)
 8003dcc:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <prvInitialiseTaskLists+0x64>)
 8003dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <prvInitialiseTaskLists+0x7c>)
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <prvInitialiseTaskLists+0x68>)
 8003dd4:	601a      	str	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200009fc 	.word	0x200009fc
 8003de4:	20000e5c 	.word	0x20000e5c
 8003de8:	20000e70 	.word	0x20000e70
 8003dec:	20000e8c 	.word	0x20000e8c
 8003df0:	20000ea0 	.word	0x20000ea0
 8003df4:	20000eb8 	.word	0x20000eb8
 8003df8:	20000e84 	.word	0x20000e84
 8003dfc:	20000e88 	.word	0x20000e88

08003e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e06:	e019      	b.n	8003e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e08:	f000 fd60 	bl	80048cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <prvCheckTasksWaitingTermination+0x50>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fd23 	bl	8002864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <prvCheckTasksWaitingTermination+0x54>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <prvCheckTasksWaitingTermination+0x54>)
 8003e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <prvCheckTasksWaitingTermination+0x58>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <prvCheckTasksWaitingTermination+0x58>)
 8003e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e32:	f000 fd7b 	bl	800492c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f810 	bl	8003e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <prvCheckTasksWaitingTermination+0x58>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e1      	bne.n	8003e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000ea0 	.word	0x20000ea0
 8003e54:	20000ecc 	.word	0x20000ecc
 8003e58:	20000eb4 	.word	0x20000eb4

08003e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3354      	adds	r3, #84	; 0x54
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 f851 	bl	8004f10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fee9 	bl	8004c54 <vPortFree>
				vPortFree( pxTCB );
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fee6 	bl	8004c54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e88:	e018      	b.n	8003ebc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d103      	bne.n	8003e9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fedd 	bl	8004c54 <vPortFree>
	}
 8003e9a:	e00f      	b.n	8003ebc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d00a      	beq.n	8003ebc <prvDeleteTCB+0x60>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	60fb      	str	r3, [r7, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <prvDeleteTCB+0x5e>
	}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <prvResetNextTaskUnblockTime+0x40>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <prvResetNextTaskUnblockTime+0x14>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <prvResetNextTaskUnblockTime+0x16>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvResetNextTaskUnblockTime+0x44>)
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ee6:	e008      	b.n	8003efa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <prvResetNextTaskUnblockTime+0x40>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <prvResetNextTaskUnblockTime+0x44>)
 8003ef8:	6013      	str	r3, [r2, #0]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	20000e84 	.word	0x20000e84
 8003f08:	20000eec 	.word	0x20000eec

08003f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <xTaskGetSchedulerState+0x34>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	e008      	b.n	8003f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <xTaskGetSchedulerState+0x38>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	e001      	b.n	8003f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f32:	687b      	ldr	r3, [r7, #4]
	}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000ed8 	.word	0x20000ed8
 8003f44:	20000ef4 	.word	0x20000ef4

08003f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d056      	beq.n	800400c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <xTaskPriorityDisinherit+0xd0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d00a      	beq.n	8003f7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	60fb      	str	r3, [r7, #12]
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d02c      	beq.n	800400c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d128      	bne.n	800400c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fc50 	bl	8002864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <xTaskPriorityDisinherit+0xd4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d903      	bls.n	8003fec <xTaskPriorityDisinherit+0xa4>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a0c      	ldr	r2, [pc, #48]	; (800401c <xTaskPriorityDisinherit+0xd4>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a09      	ldr	r2, [pc, #36]	; (8004020 <xTaskPriorityDisinherit+0xd8>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fbd3 	bl	80027ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800400c:	697b      	ldr	r3, [r7, #20]
	}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200009f8 	.word	0x200009f8
 800401c:	20000ed4 	.word	0x20000ed4
 8004020:	200009fc 	.word	0x200009fc

08004024 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fc12 	bl	8002864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d10a      	bne.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4819      	ldr	r0, [pc, #100]	; (80040bc <prvAddCurrentTaskToDelayedList+0x98>)
 8004058:	f7fe fba9 	bl	80027ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800405c:	e026      	b.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	429a      	cmp	r2, r3
 8004074:	d209      	bcs.n	800408a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f7fe fbb6 	bl	80027f4 <vListInsert>
}
 8004088:	e010      	b.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7fe fbac 	bl	80027f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d202      	bcs.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000ed0 	.word	0x20000ed0
 80040b8:	200009f8 	.word	0x200009f8
 80040bc:	20000eb8 	.word	0x20000eb8
 80040c0:	20000e88 	.word	0x20000e88
 80040c4:	20000e84 	.word	0x20000e84
 80040c8:	20000eec 	.word	0x20000eec

080040cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040d6:	f000 facb 	bl	8004670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <xTimerCreateTimerTask+0x80>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d021      	beq.n	8004126 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040ea:	1d3a      	adds	r2, r7, #4
 80040ec:	f107 0108 	add.w	r1, r7, #8
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fb15 	bl	8002724 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	9202      	str	r2, [sp, #8]
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2302      	movs	r3, #2
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	460a      	mov	r2, r1
 800410c:	4910      	ldr	r1, [pc, #64]	; (8004150 <xTimerCreateTimerTask+0x84>)
 800410e:	4811      	ldr	r0, [pc, #68]	; (8004154 <xTimerCreateTimerTask+0x88>)
 8004110:	f7ff f8b6 	bl	8003280 <xTaskCreateStatic>
 8004114:	4603      	mov	r3, r0
 8004116:	4a10      	ldr	r2, [pc, #64]	; (8004158 <xTimerCreateTimerTask+0x8c>)
 8004118:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <xTimerCreateTimerTask+0x8c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	613b      	str	r3, [r7, #16]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004142:	697b      	ldr	r3, [r7, #20]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000f28 	.word	0x20000f28
 8004150:	080050d0 	.word	0x080050d0
 8004154:	08004279 	.word	0x08004279
 8004158:	20000f2c 	.word	0x20000f2c

0800415c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <xTimerGenericCommand+0x98>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02a      	beq.n	80041e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	dc18      	bgt.n	80041d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041a4:	f7ff feb2 	bl	8003f0c <xTaskGetSchedulerState>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d109      	bne.n	80041c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <xTimerGenericCommand+0x98>)
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f107 0110 	add.w	r1, r7, #16
 80041b6:	2300      	movs	r3, #0
 80041b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ba:	f7fe fc7f 	bl	8002abc <xQueueGenericSend>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24
 80041c0:	e012      	b.n	80041e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <xTimerGenericCommand+0x98>)
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	f107 0110 	add.w	r1, r7, #16
 80041ca:	2300      	movs	r3, #0
 80041cc:	2200      	movs	r2, #0
 80041ce:	f7fe fc75 	bl	8002abc <xQueueGenericSend>
 80041d2:	6278      	str	r0, [r7, #36]	; 0x24
 80041d4:	e008      	b.n	80041e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <xTimerGenericCommand+0x98>)
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	f107 0110 	add.w	r1, r7, #16
 80041de:	2300      	movs	r3, #0
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	f7fe fd69 	bl	8002cb8 <xQueueGenericSendFromISR>
 80041e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000f28 	.word	0x20000f28

080041f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <prvProcessExpiredTimer+0x7c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3304      	adds	r3, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fb27 	bl	8002864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d122      	bne.n	8004264 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	18d1      	adds	r1, r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f000 f8c8 	bl	80043c0 <prvInsertTimerInActiveList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004236:	2300      	movs	r3, #0
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	2100      	movs	r1, #0
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f7ff ff8b 	bl	800415c <xTimerGenericCommand>
 8004246:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	60fb      	str	r3, [r7, #12]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	4798      	blx	r3
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000f20 	.word	0x20000f20

08004278 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f857 	bl	8004338 <prvGetNextExpireTime>
 800428a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4619      	mov	r1, r3
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f803 	bl	800429c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004296:	f000 f8d5 	bl	8004444 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800429a:	e7f1      	b.n	8004280 <prvTimerTask+0x8>

0800429c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042a6:	f7ff fa3f 	bl	8003728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f866 	bl	8004380 <prvSampleTimeNow>
 80042b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d130      	bne.n	800431e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <prvProcessTimerOrBlockTask+0x3c>
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d806      	bhi.n	80042d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042ca:	f7ff fa3b 	bl	8003744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff91 	bl	80041f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042d6:	e024      	b.n	8004322 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <prvProcessTimerOrBlockTask+0x90>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <prvProcessTimerOrBlockTask+0x94>)
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fe ff8b 	bl	8003218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004302:	f7ff fa1f 	bl	8003744 <xTaskResumeAll>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvProcessTimerOrBlockTask+0x98>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
}
 800431c:	e001      	b.n	8004322 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800431e:	f7ff fa11 	bl	8003744 <xTaskResumeAll>
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000f24 	.word	0x20000f24
 8004330:	20000f28 	.word	0x20000f28
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <prvGetNextExpireTime+0x44>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <prvGetNextExpireTime+0x44>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e001      	b.n	800436e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800436e:	68fb      	ldr	r3, [r7, #12]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000f20 	.word	0x20000f20

08004380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004388:	f7ff fa7a 	bl	8003880 <xTaskGetTickCount>
 800438c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <prvSampleTimeNow+0x3c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d205      	bcs.n	80043a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004398:	f000 f908 	bl	80045ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e002      	b.n	80043aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <prvSampleTimeNow+0x3c>)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000f30 	.word	0x20000f30

080043c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d812      	bhi.n	800440c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e01b      	b.n	8004432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <prvInsertTimerInActiveList+0x7c>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7fe f9f5 	bl	80027f4 <vListInsert>
 800440a:	e012      	b.n	8004432 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d206      	bcs.n	8004422 <prvInsertTimerInActiveList+0x62>
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e007      	b.n	8004432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <prvInsertTimerInActiveList+0x80>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7fe f9e1 	bl	80027f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004432:	697b      	ldr	r3, [r7, #20]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000f24 	.word	0x20000f24
 8004440:	20000f20 	.word	0x20000f20

08004444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	; 0x38
 8004448:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800444a:	e09d      	b.n	8004588 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	da18      	bge.n	8004484 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	3304      	adds	r3, #4
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	61fb      	str	r3, [r7, #28]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447a:	6850      	ldr	r0, [r2, #4]
 800447c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	4611      	mov	r1, r2
 8004482:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	db7d      	blt.n	8004586 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe f9e2 	bl	8002864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044a0:	463b      	mov	r3, r7
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ff6c 	bl	8004380 <prvSampleTimeNow>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b09      	cmp	r3, #9
 80044ae:	d86b      	bhi.n	8004588 <prvProcessReceivedCommands+0x144>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <prvProcessReceivedCommands+0x74>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044e1 	.word	0x080044e1
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044e1 	.word	0x080044e1
 80044c4:	08004589 	.word	0x08004589
 80044c8:	0800453d 	.word	0x0800453d
 80044cc:	08004575 	.word	0x08004575
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044e1 	.word	0x080044e1
 80044d8:	08004589 	.word	0x08004589
 80044dc:	0800453d 	.word	0x0800453d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	18d1      	adds	r1, r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ee:	f7ff ff67 	bl	80043c0 <prvInsertTimerInActiveList>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d047      	beq.n	8004588 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d13f      	bne.n	8004588 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	441a      	add	r2, r3
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	2100      	movs	r1, #0
 8004518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451a:	f7ff fe1f 	bl	800415c <xTimerGenericCommand>
 800451e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d130      	bne.n	8004588 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	61bb      	str	r3, [r7, #24]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	617b      	str	r3, [r7, #20]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	18d1      	adds	r1, r2, r3
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456e:	f7ff ff27 	bl	80043c0 <prvInsertTimerInActiveList>
					break;
 8004572:	e009      	b.n	8004588 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800457e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004580:	f000 fb68 	bl	8004c54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004584:	e000      	b.n	8004588 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004586:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <prvProcessReceivedCommands+0x164>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1d39      	adds	r1, r7, #4
 800458e:	2200      	movs	r2, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe fc29 	bl	8002de8 <xQueueReceive>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f af57 	bne.w	800444c <prvProcessReceivedCommands+0x8>
	}
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	3730      	adds	r7, #48	; 0x30
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000f28 	.word	0x20000f28

080045ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045b2:	e045      	b.n	8004640 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b4:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <prvSwitchTimerLists+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <prvSwitchTimerLists+0xbc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe f949 	bl	8002864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d12e      	bne.n	8004640 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d90e      	bls.n	8004612 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <prvSwitchTimerLists+0xbc>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7fe f8f2 	bl	80027f4 <vListInsert>
 8004610:	e016      	b.n	8004640 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004612:	2300      	movs	r3, #0
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	2100      	movs	r1, #0
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fd9d 	bl	800415c <xTimerGenericCommand>
 8004622:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <prvSwitchTimerLists+0x94>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	603b      	str	r3, [r7, #0]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <prvSwitchTimerLists+0xbc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1b4      	bne.n	80045b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <prvSwitchTimerLists+0xbc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <prvSwitchTimerLists+0xc0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <prvSwitchTimerLists+0xbc>)
 8004656:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <prvSwitchTimerLists+0xc0>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6013      	str	r3, [r2, #0]
}
 800465e:	bf00      	nop
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000f20 	.word	0x20000f20
 800466c:	20000f24 	.word	0x20000f24

08004670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004676:	f000 f929 	bl	80048cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <prvCheckForValidListAndQueue+0x60>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d120      	bne.n	80046c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004682:	4814      	ldr	r0, [pc, #80]	; (80046d4 <prvCheckForValidListAndQueue+0x64>)
 8004684:	f7fe f868 	bl	8002758 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004688:	4813      	ldr	r0, [pc, #76]	; (80046d8 <prvCheckForValidListAndQueue+0x68>)
 800468a:	f7fe f865 	bl	8002758 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <prvCheckForValidListAndQueue+0x6c>)
 8004690:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <prvCheckForValidListAndQueue+0x64>)
 8004692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <prvCheckForValidListAndQueue+0x70>)
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <prvCheckForValidListAndQueue+0x68>)
 8004698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800469a:	2300      	movs	r3, #0
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <prvCheckForValidListAndQueue+0x74>)
 80046a0:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <prvCheckForValidListAndQueue+0x78>)
 80046a2:	2110      	movs	r1, #16
 80046a4:	200a      	movs	r0, #10
 80046a6:	f7fe f96f 	bl	8002988 <xQueueGenericCreateStatic>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <prvCheckForValidListAndQueue+0x60>)
 80046ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <prvCheckForValidListAndQueue+0x60>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <prvCheckForValidListAndQueue+0x60>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	490b      	ldr	r1, [pc, #44]	; (80046ec <prvCheckForValidListAndQueue+0x7c>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fd82 	bl	80031c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046c4:	f000 f932 	bl	800492c <vPortExitCritical>
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000f28 	.word	0x20000f28
 80046d4:	20000ef8 	.word	0x20000ef8
 80046d8:	20000f0c 	.word	0x20000f0c
 80046dc:	20000f20 	.word	0x20000f20
 80046e0:	20000f24 	.word	0x20000f24
 80046e4:	20000fd4 	.word	0x20000fd4
 80046e8:	20000f34 	.word	0x20000f34
 80046ec:	080050d8 	.word	0x080050d8

080046f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3b04      	subs	r3, #4
 8004700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b04      	subs	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0201 	bic.w	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3b04      	subs	r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <pxPortInitialiseStack+0x54>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3b14      	subs	r3, #20
 800472a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b20      	subs	r3, #32
 8004736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	08004749 	.word	0x08004749

08004748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <prvTaskExitError+0x54>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d00a      	beq.n	8004772 <prvTaskExitError+0x2a>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <prvTaskExitError+0x28>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004786:	bf00      	nop
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0fc      	beq.n	8004788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	200000e8 	.word	0x200000e8

080047a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <pxCurrentTCBConst2>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047aa:	f380 8809 	msr	PSP, r0
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80047be:	4770      	bx	lr

080047c0 <pxCurrentTCBConst2>:
 80047c0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80047c8:	4806      	ldr	r0, [pc, #24]	; (80047e4 <prvPortStartFirstTask+0x1c>)
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f380 8808 	msr	MSP, r0
 80047d2:	b662      	cpsie	i
 80047d4:	b661      	cpsie	f
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	df00      	svc	0
 80047e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047e2:	bf00      	nop
 80047e4:	e000ed08 	.word	0xe000ed08

080047e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <xPortStartScheduler+0xd0>)
 80047f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	; 0xff
 80047fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004810:	b2da      	uxtb	r2, r3
 8004812:	4b2a      	ldr	r3, [pc, #168]	; (80048bc <xPortStartScheduler+0xd4>)
 8004814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004818:	2207      	movs	r2, #7
 800481a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481c:	e009      	b.n	8004832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b80      	cmp	r3, #128	; 0x80
 800483c:	d0ef      	beq.n	800481e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1c3 0307 	rsb	r3, r3, #7
 8004846:	2b04      	cmp	r3, #4
 8004848:	d00a      	beq.n	8004860 <xPortStartScheduler+0x78>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60bb      	str	r3, [r7, #8]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004868:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <xPortStartScheduler+0xd8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <xPortStartScheduler+0xd8>)
 8004874:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <xPortStartScheduler+0xdc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <xPortStartScheduler+0xdc>)
 8004884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <xPortStartScheduler+0xdc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <xPortStartScheduler+0xdc>)
 8004890:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004894:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004896:	f000 f8b9 	bl	8004a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <xPortStartScheduler+0xe0>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048a0:	f7ff ff92 	bl	80047c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048a4:	f7ff f8b8 	bl	8003a18 <vTaskSwitchContext>
	prvTaskExitError();
 80048a8:	f7ff ff4e 	bl	8004748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000e400 	.word	0xe000e400
 80048bc:	20001024 	.word	0x20001024
 80048c0:	20001028 	.word	0x20001028
 80048c4:	e000ed20 	.word	0xe000ed20
 80048c8:	200000e8 	.word	0x200000e8

080048cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
}
 80048e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <vPortEnterCritical+0x58>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <vPortEnterCritical+0x58>)
 80048ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <vPortEnterCritical+0x58>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d10f      	bne.n	8004918 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <vPortEnterCritical+0x5c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <vPortEnterCritical+0x4c>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	603b      	str	r3, [r7, #0]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <vPortEnterCritical+0x4a>
	}
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	200000e8 	.word	0x200000e8
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <vPortExitCritical+0x4c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <vPortExitCritical+0x24>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <vPortExitCritical+0x4c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3b01      	subs	r3, #1
 8004956:	4a08      	ldr	r2, [pc, #32]	; (8004978 <vPortExitCritical+0x4c>)
 8004958:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <vPortExitCritical+0x4c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <vPortExitCritical+0x42>
 8004962:	2300      	movs	r3, #0
 8004964:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f383 8811 	msr	BASEPRI, r3
}
 800496c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	200000e8 	.word	0x200000e8
 800497c:	00000000 	.word	0x00000000

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004990:	6010      	str	r0, [r2, #0]
 8004992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004996:	f04f 0050 	mov.w	r0, #80	; 0x50
 800499a:	f380 8811 	msr	BASEPRI, r0
 800499e:	f7ff f83b 	bl	8003a18 <vTaskSwitchContext>
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	6808      	ldr	r0, [r1, #0]
 80049b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049b6:	f380 8809 	msr	PSP, r0
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	4770      	bx	lr

080049c0 <pxCurrentTCBConst>:
 80049c0:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f7fe ff5b 	bl	800389c <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <SysTick_Handler+0x40>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f383 8811 	msr	BASEPRI, r3
}
 80049fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <vPortSetupTimerInterrupt+0x30>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <vPortSetupTimerInterrupt+0x38>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <vPortSetupTimerInterrupt+0x3c>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <vPortSetupTimerInterrupt+0x40>)
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a2e:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <vPortSetupTimerInterrupt+0x30>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e010 	.word	0xe000e010
 8004a40:	e000e018 	.word	0xe000e018
 8004a44:	200000d8 	.word	0x200000d8
 8004a48:	10624dd3 	.word	0x10624dd3
 8004a4c:	e000e014 	.word	0xe000e014

08004a50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a56:	f3ef 8305 	mrs	r3, IPSR
 8004a5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d914      	bls.n	8004a8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a62:	4a16      	ldr	r2, [pc, #88]	; (8004abc <vPortValidateInterruptPriority+0x6c>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <vPortValidateInterruptPriority+0x70>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	7afa      	ldrb	r2, [r7, #11]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d20a      	bcs.n	8004a8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	607b      	str	r3, [r7, #4]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <vPortValidateInterruptPriority+0x74>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <vPortValidateInterruptPriority+0x78>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d90a      	bls.n	8004ab2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	603b      	str	r3, [r7, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <vPortValidateInterruptPriority+0x60>
	}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	e000e3f0 	.word	0xe000e3f0
 8004ac0:	20001024 	.word	0x20001024
 8004ac4:	e000ed0c 	.word	0xe000ed0c
 8004ac8:	20001028 	.word	0x20001028

08004acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ad8:	f7fe fe26 	bl	8003728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004adc:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <pvPortMalloc+0x174>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ae4:	f000 f910 	bl	8004d08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ae8:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <pvPortMalloc+0x178>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f040 808e 	bne.w	8004c12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01d      	beq.n	8004b38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004afc:	2208      	movs	r2, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d014      	beq.n	8004b38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	3308      	adds	r3, #8
 8004b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <pvPortMalloc+0x6c>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	617b      	str	r3, [r7, #20]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d069      	beq.n	8004c12 <pvPortMalloc+0x146>
 8004b3e:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <pvPortMalloc+0x17c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d864      	bhi.n	8004c12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <pvPortMalloc+0x180>)
 8004b4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <pvPortMalloc+0x180>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b52:	e004      	b.n	8004b5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d903      	bls.n	8004b70 <pvPortMalloc+0xa4>
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f1      	bne.n	8004b54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b70:	4b33      	ldr	r3, [pc, #204]	; (8004c40 <pvPortMalloc+0x174>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d04b      	beq.n	8004c12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2208      	movs	r2, #8
 8004b80:	4413      	add	r3, r2
 8004b82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	1ad2      	subs	r2, r2, r3
 8004b94:	2308      	movs	r3, #8
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d91f      	bls.n	8004bdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <pvPortMalloc+0xf8>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	613b      	str	r3, [r7, #16]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bd6:	69b8      	ldr	r0, [r7, #24]
 8004bd8:	f000 f8f8 	bl	8004dcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <pvPortMalloc+0x17c>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <pvPortMalloc+0x17c>)
 8004be8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <pvPortMalloc+0x17c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <pvPortMalloc+0x184>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d203      	bcs.n	8004bfe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <pvPortMalloc+0x17c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <pvPortMalloc+0x184>)
 8004bfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <pvPortMalloc+0x178>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c12:	f7fe fd97 	bl	8003744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <pvPortMalloc+0x16a>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <pvPortMalloc+0x168>
	return pvReturn;
 8004c36:	69fb      	ldr	r3, [r7, #28]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3728      	adds	r7, #40	; 0x28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20001c34 	.word	0x20001c34
 8004c44:	20001c40 	.word	0x20001c40
 8004c48:	20001c38 	.word	0x20001c38
 8004c4c:	20001c2c 	.word	0x20001c2c
 8004c50:	20001c3c 	.word	0x20001c3c

08004c54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d048      	beq.n	8004cf8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c66:	2308      	movs	r3, #8
 8004c68:	425b      	negs	r3, r3
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <vPortFree+0xac>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vPortFree+0x44>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <vPortFree+0x62>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60bb      	str	r3, [r7, #8]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <vPortFree+0xac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d019      	beq.n	8004cf8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d115      	bne.n	8004cf8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <vPortFree+0xac>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cdc:	f7fe fd24 	bl	8003728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <vPortFree+0xb0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <vPortFree+0xb0>)
 8004cec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cee:	6938      	ldr	r0, [r7, #16]
 8004cf0:	f000 f86c 	bl	8004dcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cf4:	f7fe fd26 	bl	8003744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20001c40 	.word	0x20001c40
 8004d04:	20001c38 	.word	0x20001c38

08004d08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <prvHeapInit+0xac>)
 8004d16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3307      	adds	r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <prvHeapInit+0xac>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d40:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <prvHeapInit+0xb0>)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <prvHeapInit+0xb0>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d54:	2208      	movs	r2, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <prvHeapInit+0xb4>)
 8004d68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <prvHeapInit+0xb4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <prvHeapInit+0xb4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <prvHeapInit+0xb4>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <prvHeapInit+0xb8>)
 8004d96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <prvHeapInit+0xbc>)
 8004d9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <prvHeapInit+0xc0>)
 8004da2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000102c 	.word	0x2000102c
 8004db8:	20001c2c 	.word	0x20001c2c
 8004dbc:	20001c34 	.word	0x20001c34
 8004dc0:	20001c3c 	.word	0x20001c3c
 8004dc4:	20001c38 	.word	0x20001c38
 8004dc8:	20001c40 	.word	0x20001c40

08004dcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <prvInsertBlockIntoFreeList+0xa8>)
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e002      	b.n	8004de0 <prvInsertBlockIntoFreeList+0x14>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d8f7      	bhi.n	8004dda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4413      	add	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d108      	bne.n	8004e0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	441a      	add	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d118      	bne.n	8004e54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <prvInsertBlockIntoFreeList+0xac>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d00d      	beq.n	8004e4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	441a      	add	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e008      	b.n	8004e5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <prvInsertBlockIntoFreeList+0xac>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e003      	b.n	8004e5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d002      	beq.n	8004e6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr
 8004e74:	20001c2c 	.word	0x20001c2c
 8004e78:	20001c34 	.word	0x20001c34

08004e7c <__libc_init_array>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	2600      	movs	r6, #0
 8004e80:	4d0c      	ldr	r5, [pc, #48]	; (8004eb4 <__libc_init_array+0x38>)
 8004e82:	4c0d      	ldr	r4, [pc, #52]	; (8004eb8 <__libc_init_array+0x3c>)
 8004e84:	1b64      	subs	r4, r4, r5
 8004e86:	10a4      	asrs	r4, r4, #2
 8004e88:	42a6      	cmp	r6, r4
 8004e8a:	d109      	bne.n	8004ea0 <__libc_init_array+0x24>
 8004e8c:	f000 f8f0 	bl	8005070 <_init>
 8004e90:	2600      	movs	r6, #0
 8004e92:	4d0a      	ldr	r5, [pc, #40]	; (8004ebc <__libc_init_array+0x40>)
 8004e94:	4c0a      	ldr	r4, [pc, #40]	; (8004ec0 <__libc_init_array+0x44>)
 8004e96:	1b64      	subs	r4, r4, r5
 8004e98:	10a4      	asrs	r4, r4, #2
 8004e9a:	42a6      	cmp	r6, r4
 8004e9c:	d105      	bne.n	8004eaa <__libc_init_array+0x2e>
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea4:	4798      	blx	r3
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	e7ee      	b.n	8004e88 <__libc_init_array+0xc>
 8004eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eae:	4798      	blx	r3
 8004eb0:	3601      	adds	r6, #1
 8004eb2:	e7f2      	b.n	8004e9a <__libc_init_array+0x1e>
 8004eb4:	080051c4 	.word	0x080051c4
 8004eb8:	080051c4 	.word	0x080051c4
 8004ebc:	080051c4 	.word	0x080051c4
 8004ec0:	080051c8 	.word	0x080051c8

08004ec4 <__retarget_lock_acquire_recursive>:
 8004ec4:	4770      	bx	lr

08004ec6 <__retarget_lock_release_recursive>:
 8004ec6:	4770      	bx	lr

08004ec8 <memcpy>:
 8004ec8:	440a      	add	r2, r1
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ed0:	d100      	bne.n	8004ed4 <memcpy+0xc>
 8004ed2:	4770      	bx	lr
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eda:	4291      	cmp	r1, r2
 8004edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee0:	d1f9      	bne.n	8004ed6 <memcpy+0xe>
 8004ee2:	bd10      	pop	{r4, pc}

08004ee4 <memset>:
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4402      	add	r2, r0
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d100      	bne.n	8004eee <memset+0xa>
 8004eec:	4770      	bx	lr
 8004eee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef2:	e7f9      	b.n	8004ee8 <memset+0x4>

08004ef4 <cleanup_glue>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	6809      	ldr	r1, [r1, #0]
 8004efa:	4605      	mov	r5, r0
 8004efc:	b109      	cbz	r1, 8004f02 <cleanup_glue+0xe>
 8004efe:	f7ff fff9 	bl	8004ef4 <cleanup_glue>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f0a:	f000 b869 	b.w	8004fe0 <_free_r>
	...

08004f10 <_reclaim_reent>:
 8004f10:	4b2c      	ldr	r3, [pc, #176]	; (8004fc4 <_reclaim_reent+0xb4>)
 8004f12:	b570      	push	{r4, r5, r6, lr}
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4604      	mov	r4, r0
 8004f18:	4283      	cmp	r3, r0
 8004f1a:	d051      	beq.n	8004fc0 <_reclaim_reent+0xb0>
 8004f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f1e:	b143      	cbz	r3, 8004f32 <_reclaim_reent+0x22>
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d14a      	bne.n	8004fbc <_reclaim_reent+0xac>
 8004f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	b111      	cbz	r1, 8004f32 <_reclaim_reent+0x22>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f857 	bl	8004fe0 <_free_r>
 8004f32:	6961      	ldr	r1, [r4, #20]
 8004f34:	b111      	cbz	r1, 8004f3c <_reclaim_reent+0x2c>
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f852 	bl	8004fe0 <_free_r>
 8004f3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f3e:	b111      	cbz	r1, 8004f46 <_reclaim_reent+0x36>
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 f84d 	bl	8004fe0 <_free_r>
 8004f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f48:	b111      	cbz	r1, 8004f50 <_reclaim_reent+0x40>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f848 	bl	8004fe0 <_free_r>
 8004f50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f52:	b111      	cbz	r1, 8004f5a <_reclaim_reent+0x4a>
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f843 	bl	8004fe0 <_free_r>
 8004f5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f5c:	b111      	cbz	r1, 8004f64 <_reclaim_reent+0x54>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f83e 	bl	8004fe0 <_free_r>
 8004f64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f66:	b111      	cbz	r1, 8004f6e <_reclaim_reent+0x5e>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f839 	bl	8004fe0 <_free_r>
 8004f6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f70:	b111      	cbz	r1, 8004f78 <_reclaim_reent+0x68>
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 f834 	bl	8004fe0 <_free_r>
 8004f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7a:	b111      	cbz	r1, 8004f82 <_reclaim_reent+0x72>
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 f82f 	bl	8004fe0 <_free_r>
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	b1e3      	cbz	r3, 8004fc0 <_reclaim_reent+0xb0>
 8004f86:	4620      	mov	r0, r4
 8004f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f8a:	4798      	blx	r3
 8004f8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f8e:	b1b9      	cbz	r1, 8004fc0 <_reclaim_reent+0xb0>
 8004f90:	4620      	mov	r0, r4
 8004f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f96:	f7ff bfad 	b.w	8004ef4 <cleanup_glue>
 8004f9a:	5949      	ldr	r1, [r1, r5]
 8004f9c:	b941      	cbnz	r1, 8004fb0 <_reclaim_reent+0xa0>
 8004f9e:	3504      	adds	r5, #4
 8004fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa2:	2d80      	cmp	r5, #128	; 0x80
 8004fa4:	68d9      	ldr	r1, [r3, #12]
 8004fa6:	d1f8      	bne.n	8004f9a <_reclaim_reent+0x8a>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 f819 	bl	8004fe0 <_free_r>
 8004fae:	e7ba      	b.n	8004f26 <_reclaim_reent+0x16>
 8004fb0:	680e      	ldr	r6, [r1, #0]
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 f814 	bl	8004fe0 <_free_r>
 8004fb8:	4631      	mov	r1, r6
 8004fba:	e7ef      	b.n	8004f9c <_reclaim_reent+0x8c>
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	e7ef      	b.n	8004fa0 <_reclaim_reent+0x90>
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200000ec 	.word	0x200000ec

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	; (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f7ff bf7b 	b.w	8004ec4 <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	20001c44 	.word	0x20001c44

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	; (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f7ff bf76 	b.w	8004ec6 <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	20001c44 	.word	0x20001c44

08004fe0 <_free_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d040      	beq.n	800506a <_free_r+0x8a>
 8004fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fec:	1f0c      	subs	r4, r1, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfb8      	it	lt
 8004ff2:	18e4      	addlt	r4, r4, r3
 8004ff4:	f7ff ffe8 	bl	8004fc8 <__malloc_lock>
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <_free_r+0x8c>)
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	b933      	cbnz	r3, 800500c <_free_r+0x2c>
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	6014      	str	r4, [r2, #0]
 8005002:	4628      	mov	r0, r5
 8005004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005008:	f7ff bfe4 	b.w	8004fd4 <__malloc_unlock>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d908      	bls.n	8005022 <_free_r+0x42>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	1821      	adds	r1, r4, r0
 8005014:	428b      	cmp	r3, r1
 8005016:	bf01      	itttt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	1809      	addeq	r1, r1, r0
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	e7ed      	b.n	8004ffe <_free_r+0x1e>
 8005022:	461a      	mov	r2, r3
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b10b      	cbz	r3, 800502c <_free_r+0x4c>
 8005028:	42a3      	cmp	r3, r4
 800502a:	d9fa      	bls.n	8005022 <_free_r+0x42>
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	1850      	adds	r0, r2, r1
 8005030:	42a0      	cmp	r0, r4
 8005032:	d10b      	bne.n	800504c <_free_r+0x6c>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	4401      	add	r1, r0
 8005038:	1850      	adds	r0, r2, r1
 800503a:	4283      	cmp	r3, r0
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	d1e0      	bne.n	8005002 <_free_r+0x22>
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4401      	add	r1, r0
 8005046:	6011      	str	r1, [r2, #0]
 8005048:	6053      	str	r3, [r2, #4]
 800504a:	e7da      	b.n	8005002 <_free_r+0x22>
 800504c:	d902      	bls.n	8005054 <_free_r+0x74>
 800504e:	230c      	movs	r3, #12
 8005050:	602b      	str	r3, [r5, #0]
 8005052:	e7d6      	b.n	8005002 <_free_r+0x22>
 8005054:	6820      	ldr	r0, [r4, #0]
 8005056:	1821      	adds	r1, r4, r0
 8005058:	428b      	cmp	r3, r1
 800505a:	bf01      	itttt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	1809      	addeq	r1, r1, r0
 8005062:	6021      	streq	r1, [r4, #0]
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	6054      	str	r4, [r2, #4]
 8005068:	e7cb      	b.n	8005002 <_free_r+0x22>
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20001c48 	.word	0x20001c48

08005070 <_init>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	bf00      	nop
 8005074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005076:	bc08      	pop	{r3}
 8005078:	469e      	mov	lr, r3
 800507a:	4770      	bx	lr

0800507c <_fini>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr
