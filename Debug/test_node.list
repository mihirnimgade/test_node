
test_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f70  08004f70  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  08004f70  08004f70  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f70  08004f70  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000168  080050e0  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  080050e0  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017976  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003817  00000000  00000000  00037b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d1f  00000000  00000000  0003db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016715  00000000  00000000  00057827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d81  00000000  00000000  0006df3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103cbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a8  00000000  00000000  00103d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000168 	.word	0x20000168
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e40 	.word	0x08004e40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000016c 	.word	0x2000016c
 800014c:	08004e40 	.word	0x08004e40

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800015a:	4b16      	ldr	r3, [pc, #88]	; (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2210      	movs	r2, #16
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	; (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f000 fbf9 	bl	8000998 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 fa1c 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000184 	.word	0x20000184
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b08a      	sub	sp, #40	; 0x28
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a25      	ldr	r2, [pc, #148]	; (800026c <HAL_CAN_MspInit+0xb0>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d143      	bne.n	8000264 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a23      	ldr	r2, [pc, #140]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001f0:	613b      	str	r3, [r7, #16]
 80001f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <HAL_CAN_MspInit+0xb4>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800020c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	4619      	mov	r1, r3
 8000220:	4814      	ldr	r0, [pc, #80]	; (8000274 <HAL_CAN_MspInit+0xb8>)
 8000222:	f000 fee7 	bl	8000ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	4619      	mov	r1, r3
 800023a:	480e      	ldr	r0, [pc, #56]	; (8000274 <HAL_CAN_MspInit+0xb8>)
 800023c:	f000 feda 	bl	8000ff4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <HAL_CAN_MspInit+0xbc>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800024c:	627b      	str	r3, [r7, #36]	; 0x24
 800024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000250:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000254:	627b      	str	r3, [r7, #36]	; 0x24
 8000256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
 800025e:	4a06      	ldr	r2, [pc, #24]	; (8000278 <HAL_CAN_MspInit+0xbc>)
 8000260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000262:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000264:	bf00      	nop
 8000266:	3728      	adds	r7, #40	; 0x28
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40006400 	.word	0x40006400
 8000270:	40021000 	.word	0x40021000
 8000274:	40010c00 	.word	0x40010c00
 8000278:	40010000 	.word	0x40010000

0800027c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* USER CODE BEGIN RTOS_THREADS */

    sendBatteryMsgHandle = osThreadNew(sendBatteryMsg, NULL, &sendBatteryMsgAttr);
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <MX_FREERTOS_Init+0x28>)
 8000282:	2100      	movs	r1, #0
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <MX_FREERTOS_Init+0x2c>)
 8000286:	f002 f841 	bl	800230c <osThreadNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a07      	ldr	r2, [pc, #28]	; (80002ac <MX_FREERTOS_Init+0x30>)
 800028e:	6013      	str	r3, [r2, #0]
    sendMotorMsgHandle = osThreadNew(sendMotorMsg, NULL, &sendMotorMsgAttr);
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <MX_FREERTOS_Init+0x34>)
 8000292:	2100      	movs	r1, #0
 8000294:	4807      	ldr	r0, [pc, #28]	; (80002b4 <MX_FREERTOS_Init+0x38>)
 8000296:	f002 f839 	bl	800230c <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <MX_FREERTOS_Init+0x3c>)
 800029e:	6013      	str	r3, [r2, #0]
    // kernelLEDHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDAttr);

    /* USER CODE END RTOS_THREADS */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08004eb0 	.word	0x08004eb0
 80002a8:	08000379 	.word	0x08000379
 80002ac:	200001ac 	.word	0x200001ac
 80002b0:	08004ed4 	.word	0x08004ed4
 80002b4:	080002bd 	.word	0x080002bd
 80002b8:	200001b0 	.word	0x200001b0

080002bc <sendMotorMsg>:

        osDelay(KERNEL_LED_DELAY);
    }
}

__NO_RETURN void sendMotorMsg(void *argument) {
 80002bc:	b5b0      	push	{r4, r5, r7, lr}
 80002be:	b08c      	sub	sp, #48	; 0x30
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef rand_header;

    uint8_t rand_data[8] = {0};
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
    uint32_t rand_index = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t rand_delay = MAX_CAN_MOTOR_TX_DELAY;
 80002d0:	23c8      	movs	r3, #200	; 0xc8
 80002d2:	857b      	strh	r3, [r7, #42]	; 0x2a

    while (1) {
        rand_index = rand(NUM_MOTOR_MSGS);
 80002d4:	2005      	movs	r0, #5
 80002d6:	f000 fad1 	bl	800087c <rand>
 80002da:	62f8      	str	r0, [r7, #44]	; 0x2c
        rand_header = can_motor_headers[rand_index];
 80002dc:	491f      	ldr	r1, [pc, #124]	; (800035c <sendMotorMsg+0xa0>)
 80002de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002e0:	4613      	mov	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	4413      	add	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	440b      	add	r3, r1
 80002ea:	f107 0410 	add.w	r4, r7, #16
 80002ee:	461d      	mov	r5, r3
 80002f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002f8:	e884 0003 	stmia.w	r4, {r0, r1}

        rand_array(&rand_data[0], 8);
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	2108      	movs	r1, #8
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fad0 	bl	80008a8 <rand_array>

        free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <sendMotorMsg+0xa4>)
 800030a:	f000 fd5e 	bl	8000dca <HAL_CAN_GetTxMailboxesFreeLevel>
 800030e:	4603      	mov	r3, r0
 8000310:	4a14      	ldr	r2, [pc, #80]	; (8000364 <sendMotorMsg+0xa8>)
 8000312:	6013      	str	r3, [r2, #0]

        status = HAL_CAN_AddTxMessage(&hcan, &rand_header, rand_data, &can_mailbox);
 8000314:	f107 0208 	add.w	r2, r7, #8
 8000318:	f107 0110 	add.w	r1, r7, #16
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <sendMotorMsg+0xac>)
 800031e:	4810      	ldr	r0, [pc, #64]	; (8000360 <sendMotorMsg+0xa4>)
 8000320:	f000 fc79 	bl	8000c16 <HAL_CAN_AddTxMessage>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <sendMotorMsg+0xb0>)
 800032a:	701a      	strb	r2, [r3, #0]

        if (status != HAL_OK) {
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <sendMotorMsg+0xb0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <sendMotorMsg+0x80>
            error = 1;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <sendMotorMsg+0xb4>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	e004      	b.n	8000346 <sendMotorMsg+0x8a>
        } else {
            HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 800033c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <sendMotorMsg+0xb8>)
 8000342:	f000 fff3 	bl	800132c <HAL_GPIO_TogglePin>
        }

        rand_delay = rand(MAX_CAN_MOTOR_TX_DELAY);
 8000346:	20c8      	movs	r0, #200	; 0xc8
 8000348:	f000 fa98 	bl	800087c <rand>
 800034c:	4603      	mov	r3, r0
 800034e:	857b      	strh	r3, [r7, #42]	; 0x2a
        osDelay(rand_delay);
 8000350:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f884 	bl	8002460 <osDelay>
        rand_index = rand(NUM_MOTOR_MSGS);
 8000358:	e7bc      	b.n	80002d4 <sendMotorMsg+0x18>
 800035a:	bf00      	nop
 800035c:	20000078 	.word	0x20000078
 8000360:	20000184 	.word	0x20000184
 8000364:	200001bc 	.word	0x200001bc
 8000368:	200001b8 	.word	0x200001b8
 800036c:	200001b4 	.word	0x200001b4
 8000370:	200001b5 	.word	0x200001b5
 8000374:	40011000 	.word	0x40011000

08000378 <sendBatteryMsg>:
    }
}

__NO_RETURN void sendBatteryMsg(void *argument) {
 8000378:	b5b0      	push	{r4, r5, r7, lr}
 800037a:	b08c      	sub	sp, #48	; 0x30
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef rand_header;

    uint8_t rand_data[8] = {0};
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
    uint32_t rand_index = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t rand_delay = MAX_CAN_BATT_TX_DELAY;
 800038c:	23c8      	movs	r3, #200	; 0xc8
 800038e:	857b      	strh	r3, [r7, #42]	; 0x2a

    uint8_t rand_soc = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    while (1) {
        rand_index = rand(NUM_BATTERY_MSGS);
 8000396:	2005      	movs	r0, #5
 8000398:	f000 fa70 	bl	800087c <rand>
 800039c:	62f8      	str	r0, [r7, #44]	; 0x2c
        rand_header = can_battery_headers[rand_index];
 800039e:	4927      	ldr	r1, [pc, #156]	; (800043c <sendBatteryMsg+0xc4>)
 80003a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003a2:	4613      	mov	r3, r2
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	4413      	add	r3, r2
 80003a8:	00db      	lsls	r3, r3, #3
 80003aa:	440b      	add	r3, r1
 80003ac:	f107 0410 	add.w	r4, r7, #16
 80003b0:	461d      	mov	r5, r3
 80003b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003ba:	e884 0003 	stmia.w	r4, {r0, r1}

        if (rand_header.StdId == 0x626) {
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	f240 6226 	movw	r2, #1574	; 0x626
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d109      	bne.n	80003dc <sendBatteryMsg+0x64>
            rand_soc = rand(100);
 80003c8:	2064      	movs	r0, #100	; 0x64
 80003ca:	f000 fa57 	bl	800087c <rand>
 80003ce:	4603      	mov	r3, r0
 80003d0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            rand_data[0] = rand_soc;
 80003d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80003d8:	723b      	strb	r3, [r7, #8]
 80003da:	e005      	b.n	80003e8 <sendBatteryMsg+0x70>
        } else {
            rand_array(&rand_data[0], 8);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	2108      	movs	r1, #8
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fa60 	bl	80008a8 <rand_array>
        }

        free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80003e8:	4815      	ldr	r0, [pc, #84]	; (8000440 <sendBatteryMsg+0xc8>)
 80003ea:	f000 fcee 	bl	8000dca <HAL_CAN_GetTxMailboxesFreeLevel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <sendBatteryMsg+0xcc>)
 80003f2:	6013      	str	r3, [r2, #0]

        status = HAL_CAN_AddTxMessage(&hcan, &rand_header, rand_data, &can_mailbox);
 80003f4:	f107 0208 	add.w	r2, r7, #8
 80003f8:	f107 0110 	add.w	r1, r7, #16
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <sendBatteryMsg+0xd0>)
 80003fe:	4810      	ldr	r0, [pc, #64]	; (8000440 <sendBatteryMsg+0xc8>)
 8000400:	f000 fc09 	bl	8000c16 <HAL_CAN_AddTxMessage>
 8000404:	4603      	mov	r3, r0
 8000406:	461a      	mov	r2, r3
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <sendBatteryMsg+0xd4>)
 800040a:	701a      	strb	r2, [r3, #0]

        if (status != HAL_OK) {
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <sendBatteryMsg+0xd4>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d003      	beq.n	800041c <sendBatteryMsg+0xa4>
            error = 1;
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <sendBatteryMsg+0xd8>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
 800041a:	e004      	b.n	8000426 <sendBatteryMsg+0xae>
        } else {
            HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 800041c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <sendBatteryMsg+0xdc>)
 8000422:	f000 ff83 	bl	800132c <HAL_GPIO_TogglePin>
        }

        rand_delay = rand(MAX_CAN_BATT_TX_DELAY);
 8000426:	20c8      	movs	r0, #200	; 0xc8
 8000428:	f000 fa28 	bl	800087c <rand>
 800042c:	4603      	mov	r3, r0
 800042e:	857b      	strh	r3, [r7, #42]	; 0x2a
        osDelay(rand_delay);
 8000430:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000432:	4618      	mov	r0, r3
 8000434:	f002 f814 	bl	8002460 <osDelay>
        rand_index = rand(NUM_BATTERY_MSGS);
 8000438:	e7ad      	b.n	8000396 <sendBatteryMsg+0x1e>
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000
 8000440:	20000184 	.word	0x20000184
 8000444:	200001bc 	.word	0x200001bc
 8000448:	200001b8 	.word	0x200001b8
 800044c:	200001b4 	.word	0x200001b4
 8000450:	200001b5 	.word	0x200001b5
 8000454:	40011000 	.word	0x40011000

08000458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_GPIO_Init+0xa8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a23      	ldr	r2, [pc, #140]	; (8000500 <MX_GPIO_Init+0xa8>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_GPIO_Init+0xa8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <MX_GPIO_Init+0xa8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <MX_GPIO_Init+0xa8>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_GPIO_Init+0xa8>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_GPIO_Init+0xa8>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a17      	ldr	r2, [pc, #92]	; (8000500 <MX_GPIO_Init+0xa8>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_GPIO_Init+0xa8>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_GPIO_Init+0xa8>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a11      	ldr	r2, [pc, #68]	; (8000500 <MX_GPIO_Init+0xa8>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_GPIO_Init+0xa8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	480c      	ldr	r0, [pc, #48]	; (8000504 <MX_GPIO_Init+0xac>)
 80004d4:	f000 ff12 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 80004d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <MX_GPIO_Init+0xac>)
 80004f2:	f000 fd7f 	bl	8000ff4 <HAL_GPIO_Init>

}
 80004f6:	bf00      	nop
 80004f8:	3720      	adds	r7, #32
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	40011000 	.word	0x40011000

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa12 	bl	8000934 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f812 	bl	8000538 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f7ff ffa0 	bl	8000458 <MX_GPIO_Init>
  MX_CAN_Init();
 8000518:	f7ff fe1a 	bl	8000150 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f91a 	bl	8000754 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <main+0x2c>)
 8000522:	f000 fb34 	bl	8000b8e <HAL_CAN_Start>

  /* USER CODE END 2 */

  osKernelInitialize();
 8000526:	f001 fe8b 	bl	8002240 <osKernelInitialize>
  MX_FREERTOS_Init();
 800052a:	f7ff fea7 	bl	800027c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800052e:	f001 feb9 	bl	80022a4 <osKernelStart>

  /* Infinite loop */
  while (1);
 8000532:	e7fe      	b.n	8000532 <main+0x2a>
 8000534:	20000184 	.word	0x20000184

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	; 0x40
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fbb4 	bl	8004cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055a:	2301      	movs	r3, #1
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000576:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0318 	add.w	r3, r7, #24
 8000580:	4618      	mov	r0, r3
 8000582:	f000 feed 	bl	8001360 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800058c:	f000 f82c 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2102      	movs	r1, #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f95a 	bl	8001864 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005b6:	f000 f817 	bl	80005e8 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3740      	adds	r7, #64	; 0x40
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d101      	bne.n	80005da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005d6:	f000 f9c3 	bl	8000960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_MspInit+0x60>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <HAL_MspInit+0x60>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <HAL_MspInit+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_MspInit+0x60>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <HAL_MspInit+0x60>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_MspInit+0x60>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	210f      	movs	r1, #15
 800062e:	f06f 0001 	mvn.w	r0, #1
 8000632:	f000 fcb4 	bl	8000f9e <HAL_NVIC_SetPriority>

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_MspInit+0x64>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_MspInit+0x64>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	2019      	movs	r0, #25
 8000672:	f000 fc94 	bl	8000f9e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000676:	2019      	movs	r0, #25
 8000678:	f000 fcad 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <HAL_InitTick+0x9c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <HAL_InitTick+0x9c>)
 8000682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <HAL_InitTick+0x9c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000694:	f107 0210 	add.w	r2, r7, #16
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa5a 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006a4:	f001 fa44 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 80006a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <HAL_InitTick+0xa0>)
 80006ae:	fba2 2303 	umull	r2, r3, r2, r3
 80006b2:	0c9b      	lsrs	r3, r3, #18
 80006b4:	3b01      	subs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_InitTick+0xa4>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <HAL_InitTick+0xa8>)
 80006bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_InitTick+0xa4>)
 80006c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_InitTick+0xa4>)
 80006c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_InitTick+0xa4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_InitTick+0xa4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <HAL_InitTick+0xa4>)
 80006da:	f001 fa8b 	bl	8001bf4 <HAL_TIM_Base_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d104      	bne.n	80006ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <HAL_InitTick+0xa4>)
 80006e6:	f001 fadd 	bl	8001ca4 <HAL_TIM_Base_Start_IT>
 80006ea:	4603      	mov	r3, r0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3730      	adds	r7, #48	; 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	431bde83 	.word	0x431bde83
 8000700:	200001c0 	.word	0x200001c0
 8000704:	40012c00 	.word	0x40012c00

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
	...

08000734 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <TIM1_UP_IRQHandler+0x10>)
 800073a:	f001 fb05 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200001c0 	.word	0x200001c0

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fc7c 	bl	8002088 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f7ff ff27 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000208 	.word	0x20000208
 80007a4:	40004400 	.word	0x40004400

080007a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <HAL_UART_MspInit+0x88>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d12f      	bne.n	8000828 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d2:	61d3      	str	r3, [r2, #28]
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f8:	2304      	movs	r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <HAL_UART_MspInit+0x90>)
 800080c:	f000 fbf2 	bl	8000ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000810:	2308      	movs	r3, #8
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_UART_MspInit+0x90>)
 8000824:	f000 fbe6 	bl	8000ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800

0800083c <xorshift32>:
 *      Author: Mihir Nimgade
 */

#include "xorshift.h"

uint32_t xorshift32(struct xorshift32_state *state) {
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    uint32_t x = state->a;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
    x ^= x << 13;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	035b      	lsls	r3, r3, #13
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4053      	eors	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
    x ^= x >> 17;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	0c5b      	lsrs	r3, r3, #17
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	4053      	eors	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
    x ^= x << 5;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	015b      	lsls	r3, r3, #5
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4053      	eors	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
    return state->a = x;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <rand>:

uint32_t rand(uint32_t limit) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    // initialize xorshift state
    static struct xorshift32_state state = {
        .a = 3
    };

    return (xorshift32(&state) % limit);
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <rand+0x28>)
 8000886:	f7ff ffd9 	bl	800083c <xorshift32>
 800088a:	4603      	mov	r3, r0
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	fb01 f202 	mul.w	r2, r1, r2
 8000898:	1a9b      	subs	r3, r3, r2
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000f4 	.word	0x200000f4

080008a8 <rand_array>:

void rand_array(uint8_t *array, uint8_t length) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i=0; i<length; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	e00c      	b.n	80008d4 <rand_array+0x2c>
        array[i] = rand(256);
 80008ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008be:	f7ff ffdd 	bl	800087c <rand>
 80008c2:	4601      	mov	r1, r0
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<length; i++) {
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	3301      	adds	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3ee      	bcc.n	80008ba <rand_array+0x12>
    }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	; (8000920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090e:	f7ff ff1b 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000912:	f004 f99b 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fdf7 	bl	8000508 <main>
  bx lr
 800091a:	4770      	bx	lr
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000924:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 8000928:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800092c:	20001c60 	.word	0x20001c60

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 fb1f 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	200f      	movs	r0, #15
 800094c:	f7ff fe86 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff fe50 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	200000fc 	.word	0x200000fc
 8000980:	2000024c 	.word	0x2000024c

08000984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	2000024c 	.word	0x2000024c

08000998 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e0ed      	b.n	8000b86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fc00 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009cc:	f7ff ffda 	bl	8000984 <HAL_GetTick>
 80009d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009d2:	e012      	b.n	80009fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d4:	f7ff ffd6 	bl	8000984 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b0a      	cmp	r3, #10
 80009e0:	d90b      	bls.n	80009fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2205      	movs	r2, #5
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e0c5      	b.n	8000b86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0e5      	beq.n	80009d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f022 0202 	bic.w	r2, r2, #2
 8000a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a18:	f7ff ffb4 	bl	8000984 <HAL_GetTick>
 8000a1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a1e:	e012      	b.n	8000a46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a20:	f7ff ffb0 	bl	8000984 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	2b0a      	cmp	r3, #10
 8000a2c:	d90b      	bls.n	8000a46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e09f      	b.n	8000b86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1e5      	bne.n	8000a20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7e1b      	ldrb	r3, [r3, #24]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d108      	bne.n	8000a6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e007      	b.n	8000a7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7e5b      	ldrb	r3, [r3, #25]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d108      	bne.n	8000a98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e007      	b.n	8000aa8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7e9b      	ldrb	r3, [r3, #26]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f042 0220 	orr.w	r2, r2, #32
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0220 	bic.w	r2, r2, #32
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7edb      	ldrb	r3, [r3, #27]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d108      	bne.n	8000aec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 0210 	bic.w	r2, r2, #16
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e007      	b.n	8000afc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0210 	orr.w	r2, r2, #16
 8000afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7f1b      	ldrb	r3, [r3, #28]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d108      	bne.n	8000b16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0208 	orr.w	r2, r2, #8
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e007      	b.n	8000b26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0208 	bic.w	r2, r2, #8
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7f5b      	ldrb	r3, [r3, #29]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d108      	bne.n	8000b40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f042 0204 	orr.w	r2, r2, #4
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0204 	bic.w	r2, r2, #4
 8000b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	ea42 0103 	orr.w	r1, r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d12e      	bne.n	8000c00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0201 	bic.w	r2, r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000bba:	f7ff fee3 	bl	8000984 <HAL_GetTick>
 8000bbe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bc0:	e012      	b.n	8000be8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc2:	f7ff fedf 	bl	8000984 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d90b      	bls.n	8000be8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2205      	movs	r2, #5
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e012      	b.n	8000c0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1e5      	bne.n	8000bc2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e006      	b.n	8000c0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
  }
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b089      	sub	sp, #36	; 0x24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c34:	7ffb      	ldrb	r3, [r7, #31]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d003      	beq.n	8000c42 <HAL_CAN_AddTxMessage+0x2c>
 8000c3a:	7ffb      	ldrb	r3, [r7, #31]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	f040 80b8 	bne.w	8000db2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10a      	bne.n	8000c62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d105      	bne.n	8000c62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 80a0 	beq.w	8000da2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	0e1b      	lsrs	r3, r3, #24
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d907      	bls.n	8000c82 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e09e      	b.n	8000dc0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c82:	2201      	movs	r2, #1
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10d      	bne.n	8000cb0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c9e:	68f9      	ldr	r1, [r7, #12]
 8000ca0:	6809      	ldr	r1, [r1, #0]
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	440b      	add	r3, r1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e00f      	b.n	8000cd0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cc4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3318      	adds	r3, #24
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	440b      	add	r3, r1
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	7d1b      	ldrb	r3, [r3, #20]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d111      	bne.n	8000d10 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	6811      	ldr	r1, [r2, #0]
 8000d00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3318      	adds	r3, #24
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	440b      	add	r3, r1
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3307      	adds	r3, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	061a      	lsls	r2, r3, #24
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3306      	adds	r3, #6
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3305      	adds	r3, #5
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	3204      	adds	r2, #4
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	4610      	mov	r0, r2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	6811      	ldr	r1, [r2, #0]
 8000d38:	ea43 0200 	orr.w	r2, r3, r0
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	440b      	add	r3, r1
 8000d42:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3303      	adds	r3, #3
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	061a      	lsls	r2, r3, #24
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3302      	adds	r3, #2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	4313      	orrs	r3, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	4610      	mov	r0, r2
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	6811      	ldr	r1, [r2, #0]
 8000d6e:	ea43 0200 	orr.w	r2, r3, r0
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	440b      	add	r3, r1
 8000d78:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3318      	adds	r3, #24
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	4413      	add	r3, r2
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	6811      	ldr	r1, [r2, #0]
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3318      	adds	r3, #24
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	440b      	add	r3, r1
 8000d9c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e00e      	b.n	8000dc0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e006      	b.n	8000dc0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
  }
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3724      	adds	r7, #36	; 0x24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ddc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dde:	7afb      	ldrb	r3, [r7, #11]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d002      	beq.n	8000dea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000de4:	7afb      	ldrb	r3, [r7, #11]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d11d      	bne.n	8000e26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4906      	ldr	r1, [pc, #24]	; (8000ecc <__NVIC_EnableIRQ+0x34>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff4f 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff64 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ffb2 	bl	8000f24 <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff81 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff57 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e169      	b.n	80012dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001008:	2201      	movs	r2, #1
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8158 	bne.w	80012d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a9a      	ldr	r2, [pc, #616]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d05e      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001030:	4a98      	ldr	r2, [pc, #608]	; (8001294 <HAL_GPIO_Init+0x2a0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d875      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001036:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d058      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 800103c:	4a96      	ldr	r2, [pc, #600]	; (8001298 <HAL_GPIO_Init+0x2a4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d86f      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001042:	4a96      	ldr	r2, [pc, #600]	; (800129c <HAL_GPIO_Init+0x2a8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d052      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001048:	4a94      	ldr	r2, [pc, #592]	; (800129c <HAL_GPIO_Init+0x2a8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d869      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800104e:	4a94      	ldr	r2, [pc, #592]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d04c      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001054:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d863      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800105a:	4a92      	ldr	r2, [pc, #584]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d046      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
 8001060:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_GPIO_Init+0x2b0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d85d      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d82a      	bhi.n	80010c0 <HAL_GPIO_Init+0xcc>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d859      	bhi.n	8001122 <HAL_GPIO_Init+0x12e>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <HAL_GPIO_Init+0x80>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	080010ef 	.word	0x080010ef
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010db 	.word	0x080010db
 8001080:	0800111d 	.word	0x0800111d
 8001084:	08001123 	.word	0x08001123
 8001088:	08001123 	.word	0x08001123
 800108c:	08001123 	.word	0x08001123
 8001090:	08001123 	.word	0x08001123
 8001094:	08001123 	.word	0x08001123
 8001098:	08001123 	.word	0x08001123
 800109c:	08001123 	.word	0x08001123
 80010a0:	08001123 	.word	0x08001123
 80010a4:	08001123 	.word	0x08001123
 80010a8:	08001123 	.word	0x08001123
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001123 	.word	0x08001123
 80010b4:	08001123 	.word	0x08001123
 80010b8:	080010d1 	.word	0x080010d1
 80010bc:	080010e5 	.word	0x080010e5
 80010c0:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <HAL_GPIO_Init+0x2b4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c6:	e02c      	b.n	8001122 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e029      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	3304      	adds	r3, #4
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e024      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	3308      	adds	r3, #8
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e01f      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	330c      	adds	r3, #12
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e01a      	b.n	8001124 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f6:	2304      	movs	r3, #4
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e013      	b.n	8001124 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	611a      	str	r2, [r3, #16]
          break;
 800110e:	e009      	b.n	8001124 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001110:	2308      	movs	r3, #8
 8001112:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	615a      	str	r2, [r3, #20]
          break;
 800111a:	e003      	b.n	8001124 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x130>
          break;
 8001122:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	d801      	bhi.n	800112e <HAL_GPIO_Init+0x13a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e001      	b.n	8001132 <HAL_GPIO_Init+0x13e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3304      	adds	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d802      	bhi.n	8001140 <HAL_GPIO_Init+0x14c>
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x152>
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3b08      	subs	r3, #8
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	210f      	movs	r1, #15
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	6a39      	ldr	r1, [r7, #32]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80b1 	beq.w	80012d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HAL_GPIO_Init+0x2c0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x1ec>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1e8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1e0>
 80011d0:	2303      	movs	r3, #3
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011e0:	2300      	movs	r3, #0
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	492c      	ldr	r1, [pc, #176]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4928      	ldr	r1, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001224:	4013      	ands	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4922      	ldr	r1, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	43db      	mvns	r3, r3
 800124a:	491e      	ldr	r1, [pc, #120]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800124c:	4013      	ands	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4918      	ldr	r1, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4914      	ldr	r1, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e021      	b.n	80012d6 <HAL_GPIO_Init+0x2e2>
 8001292:	bf00      	nop
 8001294:	10320000 	.word	0x10320000
 8001298:	10310000 	.word	0x10310000
 800129c:	10220000 	.word	0x10220000
 80012a0:	10210000 	.word	0x10210000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f47f ae8e 	bne.w	8001008 <HAL_GPIO_Init+0x14>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	372c      	adds	r7, #44	; 0x2c
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	611a      	str	r2, [r3, #16]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43d9      	mvns	r1, r3
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	400b      	ands	r3, r1
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	611a      	str	r2, [r3, #16]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
	...

08001360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e272      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8087 	beq.w	800148e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b04      	cmp	r3, #4
 800138a:	d00c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800138c:	4b8f      	ldr	r3, [pc, #572]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d112      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
 8001398:	4b8c      	ldr	r3, [pc, #560]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d10b      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	4b89      	ldr	r3, [pc, #548]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d06c      	beq.n	800148c <HAL_RCC_OscConfig+0x12c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d168      	bne.n	800148c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e24c      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x76>
 80013c8:	4b80      	ldr	r3, [pc, #512]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a7f      	ldr	r2, [pc, #508]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e02e      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a77      	ldr	r2, [pc, #476]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0xbc>
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a71      	ldr	r2, [pc, #452]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6e      	ldr	r2, [pc, #440]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 800141c:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6a      	ldr	r2, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a67      	ldr	r2, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff faa2 	bl	8000984 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fa9e 	bl	8000984 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e200      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xe4>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fa8e 	bl	8000984 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fa8a 	bl	8000984 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1ec      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x10c>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c0      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4939      	ldr	r1, [pc, #228]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fa43 	bl	8000984 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fa3f 	bl	8000984 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fa22 	bl	8000984 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fa1e 	bl	8000984 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e180      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03a      	beq.n	80015e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_RCC_OscConfig+0x274>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fa02 	bl	8000984 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff f9fe 	bl	8000984 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e160      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 fb08 	bl	8001bb8 <RCC_Delay>
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_RCC_OscConfig+0x274>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff f9e8 	bl	8000984 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	e00f      	b.n	80015d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff f9e4 	bl	8000984 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d908      	bls.n	80015d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e146      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	42420000 	.word	0x42420000
 80015d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e9      	bne.n	80015b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a6 	beq.w	800173e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a87      	ldr	r2, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7e      	ldr	r2, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff f9a5 	bl	8000984 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff f9a1 	bl	8000984 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e103      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b75      	ldr	r3, [pc, #468]	; (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x312>
 8001664:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x334>
 800167a:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a69      	ldr	r2, [pc, #420]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a66      	ldr	r2, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x356>
 800169c:	4b61      	ldr	r3, [pc, #388]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a60      	ldr	r2, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 80016b6:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b58      	ldr	r3, [pc, #352]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a57      	ldr	r2, [pc, #348]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f955 	bl	8000984 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff f951 	bl	8000984 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0b1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x37e>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff f93f 	bl	8000984 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff f93b 	bl	8000984 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e09b      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b40      	ldr	r3, [pc, #256]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8087 	beq.w	8001856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d061      	beq.n	8001818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d146      	bne.n	80017ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCC_OscConfig+0x4cc>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff f90f 	bl	8000984 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff f90b 	bl	8000984 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e06d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4921      	ldr	r1, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a19      	ldr	r1, [r3, #32]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	430b      	orrs	r3, r1
 80017b6:	491b      	ldr	r1, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff f8df 	bl	8000984 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff f8db 	bl	8000984 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x46a>
 80017e8:	e035      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f8c8 	bl	8000984 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f8c4 	bl	8000984 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e026      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x498>
 8001816:	e01e      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e019      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 8001824:	40021000 	.word	0x40021000
 8001828:	40007000 	.word	0x40007000
 800182c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x500>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff f816 	bl	8000984 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff f812 	bl	8000984 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fe22 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08004ef8 	.word	0x08004ef8
 8001a30:	200000f0 	.word	0x200000f0
 8001a34:	200000f8 	.word	0x200000f8

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b490      	push	{r4, r7}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a40:	1d3c      	adds	r4, r7, #4
 8001a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a48:	f240 2301 	movw	r3, #513	; 0x201
 8001a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x40>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x46>
 8001a76:	e02b      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a7a:	623b      	str	r3, [r7, #32]
      break;
 8001a7c:	e02b      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3328      	adds	r3, #40	; 0x28
 8001a88:	443b      	add	r3, r7
 8001a8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	0c5b      	lsrs	r3, r3, #17
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	3328      	adds	r3, #40	; 0x28
 8001aa6:	443b      	add	r3, r7
 8001aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	e004      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	623b      	str	r3, [r7, #32]
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad2:	623b      	str	r3, [r7, #32]
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc90      	pop	{r4, r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	08004e88 	.word	0x08004e88
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	007a1200 	.word	0x007a1200
 8001af0:	003d0900 	.word	0x003d0900

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	200000f0 	.word	0x200000f0

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff2 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08004f08 	.word	0x08004f08

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0adb      	lsrs	r3, r3, #11
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08004f08 	.word	0x08004f08

08001b58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_GetClockConfig+0x58>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_RCC_GetClockConfig+0x58>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetClockConfig+0x58>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_RCC_GetClockConfig+0x58>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <RCC_Delay+0x34>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <RCC_Delay+0x38>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0a5b      	lsrs	r3, r3, #9
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bd4:	bf00      	nop
  }
  while (Delay --);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <RCC_Delay+0x1c>
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	200000f0 	.word	0x200000f0
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f839 	bl	8001c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 f9b4 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d001      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e03a      	b.n	8001d32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <HAL_TIM_Base_Start_IT+0x98>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x58>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d009      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x58>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_TIM_Base_Start_IT+0x9c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x58>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_TIM_Base_Start_IT+0xa0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d111      	bne.n	8001d20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d010      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1e:	e007      	b.n	8001d30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0202 	mvn.w	r2, #2
 8001d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8ed 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8e0 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8ef 	bl	8001f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0204 	mvn.w	r2, #4
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8c3 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8b6 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8c5 	bl	8001f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0208 	mvn.w	r2, #8
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f899 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f88c 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f89b 	bl	8001f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0210 	mvn.w	r2, #16
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2208      	movs	r2, #8
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f86f 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f862 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f871 	bl	8001f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0201 	mvn.w	r2, #1
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fb7c 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8bf 	bl	8002076 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f835 	bl	8001f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0220 	mvn.w	r2, #32
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f88a 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a29      	ldr	r2, [pc, #164]	; (8002058 <TIM_Base_SetConfig+0xb8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x30>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x30>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a26      	ldr	r2, [pc, #152]	; (800205c <TIM_Base_SetConfig+0xbc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x30>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <TIM_Base_SetConfig+0xc0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <TIM_Base_SetConfig+0xb8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00b      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d007      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <TIM_Base_SetConfig+0xbc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d003      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <TIM_Base_SetConfig+0xc0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d108      	bne.n	8002014 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <TIM_Base_SetConfig+0xb8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	615a      	str	r2, [r3, #20]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40000400 	.word	0x40000400
 8002060:	40000800 	.word	0x40000800

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e03f      	b.n	800211a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fb7a 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f829 	bl	8002124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800215e:	f023 030c 	bic.w	r3, r3, #12
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	430b      	orrs	r3, r1
 800216a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2c      	ldr	r2, [pc, #176]	; (8002238 <UART_SetConfig+0x114>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800218c:	f7ff fcd0 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	e002      	b.n	800219a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002194:	f7ff fcb8 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009a      	lsls	r2, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	4a22      	ldr	r2, [pc, #136]	; (800223c <UART_SetConfig+0x118>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	0119      	lsls	r1, r3, #4
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <UART_SetConfig+0x118>)
 80021d2:	fba3 0302 	umull	r0, r3, r3, r2
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	fb00 f303 	mul.w	r3, r0, r3
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	3332      	adds	r3, #50	; 0x32
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	4419      	add	r1, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009a      	lsls	r2, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fbb2 f2f3 	udiv	r2, r2, r3
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <UART_SetConfig+0x118>)
 800220a:	fba3 0302 	umull	r0, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2064      	movs	r0, #100	; 0x64
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	3332      	adds	r3, #50	; 0x32
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <UART_SetConfig+0x118>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	f003 020f 	and.w	r2, r3, #15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	440a      	add	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40013800 	.word	0x40013800
 800223c:	51eb851f 	.word	0x51eb851f

08002240 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002246:	f3ef 8305 	mrs	r3, IPSR
 800224a:	60bb      	str	r3, [r7, #8]
  return(result);
 800224c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002252:	f3ef 8310 	mrs	r3, PRIMASK
 8002256:	607b      	str	r3, [r7, #4]
  return(result);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <osKernelInitialize+0x32>
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <osKernelInitialize+0x60>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d109      	bne.n	800227a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002266:	f3ef 8311 	mrs	r3, BASEPRI
 800226a:	603b      	str	r3, [r7, #0]
  return(result);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002272:	f06f 0305 	mvn.w	r3, #5
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e00c      	b.n	8002294 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <osKernelInitialize+0x60>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <osKernelInitialize+0x60>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e002      	b.n	8002294 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002294:	68fb      	ldr	r3, [r7, #12]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000250 	.word	0x20000250

080022a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022aa:	f3ef 8305 	mrs	r3, IPSR
 80022ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80022b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10f      	bne.n	80022d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ba:	607b      	str	r3, [r7, #4]
  return(result);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <osKernelStart+0x32>
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <osKernelStart+0x64>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d109      	bne.n	80022de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022ca:	f3ef 8311 	mrs	r3, BASEPRI
 80022ce:	603b      	str	r3, [r7, #0]
  return(result);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <osKernelStart+0x3a>
    stat = osErrorISR;
 80022d6:	f06f 0305 	mvn.w	r3, #5
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e00e      	b.n	80022fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <osKernelStart+0x64>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <osKernelStart+0x64>)
 80022e8:	2202      	movs	r2, #2
 80022ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80022ec:	f001 f890 	bl	8003410 <vTaskStartScheduler>
      stat = osOK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e002      	b.n	80022fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000250 	.word	0x20000250

0800230c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b092      	sub	sp, #72	; 0x48
 8002310:	af04      	add	r7, sp, #16
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800231c:	f3ef 8305 	mrs	r3, IPSR
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8094 	bne.w	8002452 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232a:	f3ef 8310 	mrs	r3, PRIMASK
 800232e:	623b      	str	r3, [r7, #32]
  return(result);
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 808d 	bne.w	8002452 <osThreadNew+0x146>
 8002338:	4b48      	ldr	r3, [pc, #288]	; (800245c <osThreadNew+0x150>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d106      	bne.n	800234e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002340:	f3ef 8311 	mrs	r3, BASEPRI
 8002344:	61fb      	str	r3, [r7, #28]
  return(result);
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 8082 	bne.w	8002452 <osThreadNew+0x146>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d07e      	beq.n	8002452 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002358:	2318      	movs	r3, #24
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800235c:	2300      	movs	r3, #0
 800235e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002360:	f107 031b 	add.w	r3, r7, #27
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d045      	beq.n	80023fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <osThreadNew+0x74>
        name = attr->name;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <osThreadNew+0x9a>
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	2b38      	cmp	r3, #56	; 0x38
 8002398:	d805      	bhi.n	80023a6 <osThreadNew+0x9a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <osThreadNew+0x9e>
        return (NULL);
 80023a6:	2300      	movs	r3, #0
 80023a8:	e054      	b.n	8002454 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00e      	beq.n	80023e0 <osThreadNew+0xd4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2bbb      	cmp	r3, #187	; 0xbb
 80023c8:	d90a      	bls.n	80023e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <osThreadNew+0xd4>
        mem = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023de:	e010      	b.n	8002402 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <osThreadNew+0xf6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <osThreadNew+0xf6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <osThreadNew+0xf6>
          mem = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fc:	e001      	b.n	8002402 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	2b01      	cmp	r3, #1
 8002406:	d110      	bne.n	800242a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002410:	9202      	str	r2, [sp, #8]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fe12 	bl	8003048 <xTaskCreateStatic>
 8002424:	4603      	mov	r3, r0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e013      	b.n	8002452 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d110      	bne.n	8002452 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	b29a      	uxth	r2, r3
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fe5c 	bl	8003100 <xTaskCreate>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <osThreadNew+0x146>
          hTask = NULL;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002452:	697b      	ldr	r3, [r7, #20]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3738      	adds	r7, #56	; 0x38
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000250 	.word	0x20000250

08002460 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002468:	f3ef 8305 	mrs	r3, IPSR
 800246c:	613b      	str	r3, [r7, #16]
  return(result);
 800246e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10f      	bne.n	8002494 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002474:	f3ef 8310 	mrs	r3, PRIMASK
 8002478:	60fb      	str	r3, [r7, #12]
  return(result);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <osDelay+0x34>
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <osDelay+0x58>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d109      	bne.n	800249c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002488:	f3ef 8311 	mrs	r3, BASEPRI
 800248c:	60bb      	str	r3, [r7, #8]
  return(result);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <osDelay+0x3c>
    stat = osErrorISR;
 8002494:	f06f 0305 	mvn.w	r3, #5
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e007      	b.n	80024ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 ff7e 	bl	80033a8 <vTaskDelay>
    }
  }

  return (stat);
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000250 	.word	0x20000250

080024bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <vApplicationGetIdleTaskMemory+0x28>)
 80024cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80024d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000254 	.word	0x20000254
 80024e8:	20000310 	.word	0x20000310

080024ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <vApplicationGetTimerTaskMemory+0x2c>)
 80024fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <vApplicationGetTimerTaskMemory+0x30>)
 8002502:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000510 	.word	0x20000510
 800251c:	200005cc 	.word	0x200005cc

08002520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f103 0208 	add.w	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f103 0208 	add.w	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0208 	add.w	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d103      	bne.n	80025dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e00c      	b.n	80025f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3308      	adds	r3, #8
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e002      	b.n	80025ea <vListInsert+0x2e>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d2f6      	bcs.n	80025e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6852      	ldr	r2, [r2, #4]
 800264c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	d103      	bne.n	8002660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
	...

08002680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026aa:	f001 fff7 	bl	800469c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	68f9      	ldr	r1, [r7, #12]
 80026b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	441a      	add	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	3b01      	subs	r3, #1
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	441a      	add	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	22ff      	movs	r2, #255	; 0xff
 80026ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d114      	bne.n	800272a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01a      	beq.n	800273e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3310      	adds	r3, #16
 800270c:	4618      	mov	r0, r3
 800270e:	f001 f91b 	bl	8003948 <xTaskRemoveFromEventList>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <xQueueGenericReset+0xcc>)
 800271a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	e009      	b.n	800273e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3310      	adds	r3, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fef6 	bl	8002520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3324      	adds	r3, #36	; 0x24
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fef1 	bl	8002520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800273e:	f001 ffdd 	bl	80046fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	e000ed04 	.word	0xe000ed04

08002750 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	; 0x38
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002776:	bf00      	nop
 8002778:	e7fe      	b.n	8002778 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <xQueueGenericCreateStatic+0x52>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <xQueueGenericCreateStatic+0x56>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <xQueueGenericCreateStatic+0x58>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	623b      	str	r3, [r7, #32]
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <xQueueGenericCreateStatic+0x7e>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <xQueueGenericCreateStatic+0x82>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <xQueueGenericCreateStatic+0x84>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	61fb      	str	r3, [r7, #28]
}
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027ee:	2350      	movs	r3, #80	; 0x50
 80027f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b50      	cmp	r3, #80	; 0x50
 80027f6:	d00a      	beq.n	800280e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	61bb      	str	r3, [r7, #24]
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002820:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f805 	bl	800283e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002836:	4618      	mov	r0, r3
 8002838:	3730      	adds	r7, #48	; 0x30
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e002      	b.n	8002860 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800286c:	2101      	movs	r1, #1
 800286e:	69b8      	ldr	r0, [r7, #24]
 8002870:	f7ff ff06 	bl	8002680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002892:	2300      	movs	r3, #0
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueGenericSend+0x32>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <xQueueGenericSend+0x40>
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <xQueueGenericSend+0x44>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <xQueueGenericSend+0x46>
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <xQueueGenericSend+0x60>
	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028e0:	bf00      	nop
 80028e2:	e7fe      	b.n	80028e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d103      	bne.n	80028f2 <xQueueGenericSend+0x6e>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <xQueueGenericSend+0x72>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <xQueueGenericSend+0x74>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericSend+0x8e>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	623b      	str	r3, [r7, #32]
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002912:	f001 f9df 	bl	8003cd4 <xTaskGetSchedulerState>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <xQueueGenericSend+0x9e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <xQueueGenericSend+0xa2>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <xQueueGenericSend+0xa4>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <xQueueGenericSend+0xbe>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	61fb      	str	r3, [r7, #28]
}
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002942:	f001 feab 	bl	800469c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <xQueueGenericSend+0xd4>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d129      	bne.n	80029ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800295e:	f000 fa07 	bl	8002d70 <prvCopyDataToQueue>
 8002962:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	3324      	adds	r3, #36	; 0x24
 8002970:	4618      	mov	r0, r3
 8002972:	f000 ffe9 	bl	8003948 <xTaskRemoveFromEventList>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800297c:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <xQueueGenericSend+0x1f8>)
 800297e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	e00a      	b.n	80029a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <xQueueGenericSend+0x1f8>)
 8002996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029a4:	f001 feaa 	bl	80046fc <vPortExitCritical>
				return pdPASS;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e063      	b.n	8002a74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029b2:	f001 fea3 	bl	80046fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e05c      	b.n	8002a74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f823 	bl	8003a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029ce:	f001 fe95 	bl	80046fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029d2:	f000 fd8d 	bl	80034f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029d6:	f001 fe61 	bl	800469c <vPortEnterCritical>
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d103      	bne.n	80029f0 <xQueueGenericSend+0x16c>
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d103      	bne.n	8002a06 <xQueueGenericSend+0x182>
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a06:	f001 fe79 	bl	80046fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a0a:	1d3a      	adds	r2, r7, #4
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f812 	bl	8003a3c <xTaskCheckForTimeOut>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d124      	bne.n	8002a68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a20:	f000 fa9e 	bl	8002f60 <prvIsQueueFull>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 ff38 	bl	80038a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a3a:	f000 fa29 	bl	8002e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a3e:	f000 fd65 	bl	800350c <xTaskResumeAll>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f af7c 	bne.w	8002942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <xQueueGenericSend+0x1f8>)
 8002a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	e772      	b.n	8002942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5e:	f000 fa17 	bl	8002e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a62:	f000 fd53 	bl	800350c <xTaskResumeAll>
 8002a66:	e76c      	b.n	8002942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a6a:	f000 fa11 	bl	8002e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a6e:	f000 fd4d 	bl	800350c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a72:	2300      	movs	r3, #0
		}
	}
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3738      	adds	r7, #56	; 0x38
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	e000ed04 	.word	0xe000ed04

08002a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <xQueueGenericSendFromISR+0x3c>
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <xQueueGenericSendFromISR+0x40>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <xQueueGenericSendFromISR+0x42>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	623b      	str	r3, [r7, #32]
}
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d103      	bne.n	8002aea <xQueueGenericSendFromISR+0x6a>
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <xQueueGenericSendFromISR+0x6e>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <xQueueGenericSendFromISR+0x70>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	61fb      	str	r3, [r7, #28]
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b0a:	f001 fe89 	bl	8004820 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	61ba      	str	r2, [r7, #24]
 8002b24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <xQueueGenericSendFromISR+0xbc>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d12c      	bne.n	8002b96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b4c:	f000 f910 	bl	8002d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d112      	bne.n	8002b80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	3324      	adds	r3, #36	; 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 feee 	bl	8003948 <xTaskRemoveFromEventList>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e007      	b.n	8002b90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b84:	3301      	adds	r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	b25a      	sxtb	r2, r3
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b90:	2301      	movs	r3, #1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002b94:	e001      	b.n	8002b9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ba4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3738      	adds	r7, #56	; 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <xQueueReceive+0x30>
	__asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	623b      	str	r3, [r7, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <xQueueReceive+0x3e>
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <xQueueReceive+0x42>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueReceive+0x44>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueReceive+0x5e>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61fb      	str	r3, [r7, #28]
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c0e:	f001 f861 	bl	8003cd4 <xTaskGetSchedulerState>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <xQueueReceive+0x6e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <xQueueReceive+0x72>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <xQueueReceive+0x74>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueReceive+0x8e>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	61bb      	str	r3, [r7, #24]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c3e:	f001 fd2d 	bl	800469c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01f      	beq.n	8002c8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c52:	f000 f8f7 	bl	8002e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00f      	beq.n	8002c86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	3310      	adds	r3, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fe6c 	bl	8003948 <xTaskRemoveFromEventList>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <xQueueReceive+0x1bc>)
 8002c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c86:	f001 fd39 	bl	80046fc <vPortExitCritical>
				return pdPASS;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e069      	b.n	8002d62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c94:	f001 fd32 	bl	80046fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e062      	b.n	8002d62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 feb2 	bl	8003a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cb0:	f001 fd24 	bl	80046fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cb4:	f000 fc1c 	bl	80034f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cb8:	f001 fcf0 	bl	800469c <vPortEnterCritical>
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <xQueueReceive+0x122>
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <xQueueReceive+0x138>
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce8:	f001 fd08 	bl	80046fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cec:	1d3a      	adds	r2, r7, #4
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fea1 	bl	8003a3c <xTaskCheckForTimeOut>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d123      	bne.n	8002d48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d02:	f000 f917 	bl	8002f34 <prvIsQueueEmpty>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d017      	beq.n	8002d3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fdc7 	bl	80038a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d1c:	f000 f8b8 	bl	8002e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d20:	f000 fbf4 	bl	800350c <xTaskResumeAll>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d189      	bne.n	8002c3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <xQueueReceive+0x1bc>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	e780      	b.n	8002c3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d3e:	f000 f8a7 	bl	8002e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d42:	f000 fbe3 	bl	800350c <xTaskResumeAll>
 8002d46:	e77a      	b.n	8002c3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f8a1 	bl	8002e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d4e:	f000 fbdd 	bl	800350c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d54:	f000 f8ee 	bl	8002f34 <prvIsQueueEmpty>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f43f af6f 	beq.w	8002c3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000ed04 	.word	0xe000ed04

08002d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10d      	bne.n	8002daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d14d      	bne.n	8002e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 ffb8 	bl	8003d10 <xTaskPriorityDisinherit>
 8002da0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e043      	b.n	8002e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d119      	bne.n	8002de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6898      	ldr	r0, [r3, #8]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	461a      	mov	r2, r3
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	f001 ff6c 	bl	8004c98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	441a      	add	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d32b      	bcc.n	8002e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	e026      	b.n	8002e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68d8      	ldr	r0, [r3, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	461a      	mov	r2, r3
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	f001 ff52 	bl	8004c98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	425b      	negs	r3, r3
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	425b      	negs	r3, r3
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d105      	bne.n	8002e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e3a:	697b      	ldr	r3, [r7, #20]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d303      	bcc.n	8002e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	461a      	mov	r2, r3
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	f001 ff08 	bl	8004c98 <memcpy>
	}
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e98:	f001 fc00 	bl	800469c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ea4:	e011      	b.n	8002eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3324      	adds	r3, #36	; 0x24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fd48 	bl	8003948 <xTaskRemoveFromEventList>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ebe:	f000 fe1f 	bl	8003b00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dce9      	bgt.n	8002ea6 <prvUnlockQueue+0x16>
 8002ed2:	e000      	b.n	8002ed6 <prvUnlockQueue+0x46>
					break;
 8002ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	22ff      	movs	r2, #255	; 0xff
 8002eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ede:	f001 fc0d 	bl	80046fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ee2:	f001 fbdb 	bl	800469c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eee:	e011      	b.n	8002f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3310      	adds	r3, #16
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fd23 	bl	8003948 <xTaskRemoveFromEventList>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f08:	f000 fdfa 	bl	8003b00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f0c:	7bbb      	ldrb	r3, [r7, #14]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	dce9      	bgt.n	8002ef0 <prvUnlockQueue+0x60>
 8002f1c:	e000      	b.n	8002f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f28:	f001 fbe8 	bl	80046fc <vPortExitCritical>
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f3c:	f001 fbae 	bl	800469c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f52:	f001 fbd3 	bl	80046fc <vPortExitCritical>

	return xReturn;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f68:	f001 fb98 	bl	800469c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d102      	bne.n	8002f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e001      	b.n	8002f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f82:	f001 fbbb 	bl	80046fc <vPortExitCritical>

	return xReturn;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e014      	b.n	8002fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <vQueueAddToRegistry+0x4c>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fac:	490b      	ldr	r1, [pc, #44]	; (8002fdc <vQueueAddToRegistry+0x4c>)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <vQueueAddToRegistry+0x4c>)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002fc2:	e006      	b.n	8002fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	d9e7      	bls.n	8002fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	200009cc 	.word	0x200009cc

08002fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ff0:	f001 fb54 	bl	800469c <vPortEnterCritical>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d103      	bne.n	800300a <vQueueWaitForMessageRestricted+0x2a>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003010:	b25b      	sxtb	r3, r3
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d103      	bne.n	8003020 <vQueueWaitForMessageRestricted+0x40>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003020:	f001 fb6c 	bl	80046fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3324      	adds	r3, #36	; 0x24
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fc5b 	bl	80038f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7ff ff28 	bl	8002e90 <prvUnlockQueue>
	}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08e      	sub	sp, #56	; 0x38
 800304c:	af04      	add	r7, sp, #16
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <xTaskCreateStatic+0x2a>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	623b      	str	r3, [r7, #32]
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <xTaskCreateStatic+0x46>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	61fb      	str	r3, [r7, #28]
}
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800308e:	23bc      	movs	r3, #188	; 0xbc
 8003090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2bbc      	cmp	r3, #188	; 0xbc
 8003096:	d00a      	beq.n	80030ae <xTaskCreateStatic+0x66>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	61bb      	str	r3, [r7, #24]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01e      	beq.n	80030f2 <xTaskCreateStatic+0xaa>
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01b      	beq.n	80030f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030cc:	2300      	movs	r3, #0
 80030ce:	9303      	str	r3, [sp, #12]
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f851 	bl	800318c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ec:	f000 f8ec 	bl	80032c8 <prvAddNewTaskToReadyList>
 80030f0:	e001      	b.n	80030f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030f6:	697b      	ldr	r3, [r7, #20]
	}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af04      	add	r7, sp, #16
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fbc1 	bl	800489c <pvPortMalloc>
 800311a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00e      	beq.n	8003140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003122:	20bc      	movs	r0, #188	; 0xbc
 8003124:	f001 fbba 	bl	800489c <pvPortMalloc>
 8003128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
 8003136:	e005      	b.n	8003144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f001 fc73 	bl	8004a24 <vPortFree>
 800313e:	e001      	b.n	8003144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d017      	beq.n	800317a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	2300      	movs	r3, #0
 8003156:	9303      	str	r3, [sp, #12]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	9302      	str	r3, [sp, #8]
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f80f 	bl	800318c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800316e:	69f8      	ldr	r0, [r7, #28]
 8003170:	f000 f8aa 	bl	80032c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003174:	2301      	movs	r3, #1
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e002      	b.n	8003180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003180:	69bb      	ldr	r3, [r7, #24]
	}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	21a5      	movs	r1, #165	; 0xa5
 80031a6:	f001 fd85 	bl	8004cb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031b4:	3b01      	subs	r3, #1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	617b      	str	r3, [r7, #20]
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e012      	b.n	8003210 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	7819      	ldrb	r1, [r3, #0]
 80031f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	3334      	adds	r3, #52	; 0x34
 80031fa:	460a      	mov	r2, r1
 80031fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	d9e9      	bls.n	80031ea <prvInitialiseNewTask+0x5e>
 8003216:	e000      	b.n	800321a <prvInitialiseNewTask+0x8e>
		{
			break;
 8003218:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2b37      	cmp	r3, #55	; 0x37
 8003226:	d901      	bls.n	800322c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003228:	2337      	movs	r3, #55	; 0x37
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f98b 	bl	800255e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	3318      	adds	r3, #24
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f986 	bl	800255e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	3354      	adds	r3, #84	; 0x54
 800327c:	2260      	movs	r2, #96	; 0x60
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fd17 	bl	8004cb4 <memset>
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <prvInitialiseNewTask+0x130>)
 800328a:	659a      	str	r2, [r3, #88]	; 0x58
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <prvInitialiseNewTask+0x134>)
 8003290:	65da      	str	r2, [r3, #92]	; 0x5c
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <prvInitialiseNewTask+0x138>)
 8003296:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	69b8      	ldr	r0, [r7, #24]
 800329e:	f001 f90b 	bl	80044b8 <pxPortInitialiseStack>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032b4:	bf00      	nop
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	08004f30 	.word	0x08004f30
 80032c0:	08004f50 	.word	0x08004f50
 80032c4:	08004f10 	.word	0x08004f10

080032c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032d0:	f001 f9e4 	bl	800469c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <prvAddNewTaskToReadyList+0xc4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a2c      	ldr	r2, [pc, #176]	; (800338c <prvAddNewTaskToReadyList+0xc4>)
 80032dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032e6:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <prvAddNewTaskToReadyList+0xc4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d110      	bne.n	8003316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032f4:	f000 fc28 	bl	8003b48 <prvInitialiseTaskLists>
 80032f8:	e00d      	b.n	8003316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <prvAddNewTaskToReadyList+0xcc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	429a      	cmp	r2, r3
 800330e:	d802      	bhi.n	8003316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <prvAddNewTaskToReadyList+0xd0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <prvAddNewTaskToReadyList+0xd0>)
 800331e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <prvAddNewTaskToReadyList+0xd0>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <prvAddNewTaskToReadyList+0xd4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d903      	bls.n	800333c <prvAddNewTaskToReadyList+0x74>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <prvAddNewTaskToReadyList+0xd4>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <prvAddNewTaskToReadyList+0xd8>)
 800334a:	441a      	add	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7ff f90f 	bl	8002576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003358:	f001 f9d0 	bl	80046fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <prvAddNewTaskToReadyList+0xcc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	429a      	cmp	r2, r3
 8003370:	d207      	bcs.n	8003382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <prvAddNewTaskToReadyList+0xdc>)
 8003374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000ee0 	.word	0x20000ee0
 8003390:	20000a0c 	.word	0x20000a0c
 8003394:	20000eec 	.word	0x20000eec
 8003398:	20000efc 	.word	0x20000efc
 800339c:	20000ee8 	.word	0x20000ee8
 80033a0:	20000a10 	.word	0x20000a10
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <vTaskDelay+0x60>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <vTaskDelay+0x30>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60bb      	str	r3, [r7, #8]
}
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033d8:	f000 f88a 	bl	80034f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033dc:	2100      	movs	r1, #0
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fd04 	bl	8003dec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033e4:	f000 f892 	bl	800350c <xTaskResumeAll>
 80033e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <vTaskDelay+0x64>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000f08 	.word	0x20000f08
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800341e:	463a      	mov	r2, r7
 8003420:	1d39      	adds	r1, r7, #4
 8003422:	f107 0308 	add.w	r3, r7, #8
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f848 	bl	80024bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	9202      	str	r2, [sp, #8]
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	460a      	mov	r2, r1
 800343e:	4924      	ldr	r1, [pc, #144]	; (80034d0 <vTaskStartScheduler+0xc0>)
 8003440:	4824      	ldr	r0, [pc, #144]	; (80034d4 <vTaskStartScheduler+0xc4>)
 8003442:	f7ff fe01 	bl	8003048 <xTaskCreateStatic>
 8003446:	4603      	mov	r3, r0
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <vTaskStartScheduler+0xc8>)
 800344a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <vTaskStartScheduler+0xc8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e001      	b.n	800345e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003464:	f000 fd16 	bl	8003e94 <xTimerCreateTimerTask>
 8003468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11b      	bne.n	80034a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	613b      	str	r3, [r7, #16]
}
 8003482:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <vTaskStartScheduler+0xcc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3354      	adds	r3, #84	; 0x54
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <vTaskStartScheduler+0xd0>)
 800348c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <vTaskStartScheduler+0xd4>)
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <vTaskStartScheduler+0xd8>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <vTaskStartScheduler+0xdc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034a2:	f001 f889 	bl	80045b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034a6:	e00e      	b.n	80034c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d10a      	bne.n	80034c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	60fb      	str	r3, [r7, #12]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <vTaskStartScheduler+0xb4>
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	08004e98 	.word	0x08004e98
 80034d4:	08003b19 	.word	0x08003b19
 80034d8:	20000f04 	.word	0x20000f04
 80034dc:	20000a0c 	.word	0x20000a0c
 80034e0:	20000104 	.word	0x20000104
 80034e4:	20000f00 	.word	0x20000f00
 80034e8:	20000eec 	.word	0x20000eec
 80034ec:	20000ee4 	.word	0x20000ee4

080034f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <vTaskSuspendAll+0x18>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	4a03      	ldr	r2, [pc, #12]	; (8003508 <vTaskSuspendAll+0x18>)
 80034fc:	6013      	str	r3, [r2, #0]
}
 80034fe:	bf00      	nop
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000f08 	.word	0x20000f08

0800350c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800351a:	4b42      	ldr	r3, [pc, #264]	; (8003624 <xTaskResumeAll+0x118>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <xTaskResumeAll+0x2c>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	603b      	str	r3, [r7, #0]
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003538:	f001 f8b0 	bl	800469c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <xTaskResumeAll+0x118>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3b01      	subs	r3, #1
 8003542:	4a38      	ldr	r2, [pc, #224]	; (8003624 <xTaskResumeAll+0x118>)
 8003544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <xTaskResumeAll+0x118>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d162      	bne.n	8003614 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <xTaskResumeAll+0x11c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d05e      	beq.n	8003614 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003556:	e02f      	b.n	80035b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <xTaskResumeAll+0x120>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3318      	adds	r3, #24
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff f861 	bl	800262c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3304      	adds	r3, #4
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f85c 	bl	800262c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <xTaskResumeAll+0x124>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d903      	bls.n	8003588 <xTaskResumeAll+0x7c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <xTaskResumeAll+0x124>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <xTaskResumeAll+0x128>)
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7fe ffe9 	bl	8002576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b23      	ldr	r3, [pc, #140]	; (8003638 <xTaskResumeAll+0x12c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <xTaskResumeAll+0x130>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <xTaskResumeAll+0x120>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1cb      	bne.n	8003558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035c6:	f000 fb61 	bl	8003c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <xTaskResumeAll+0x134>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035d6:	f000 f845 	bl	8003664 <xTaskIncrementTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <xTaskResumeAll+0x130>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f1      	bne.n	80035d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <xTaskResumeAll+0x134>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <xTaskResumeAll+0x130>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <xTaskResumeAll+0x138>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003614:	f001 f872 	bl	80046fc <vPortExitCritical>

	return xAlreadyYielded;
 8003618:	68bb      	ldr	r3, [r7, #8]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000f08 	.word	0x20000f08
 8003628:	20000ee0 	.word	0x20000ee0
 800362c:	20000ea0 	.word	0x20000ea0
 8003630:	20000ee8 	.word	0x20000ee8
 8003634:	20000a10 	.word	0x20000a10
 8003638:	20000a0c 	.word	0x20000a0c
 800363c:	20000ef4 	.word	0x20000ef4
 8003640:	20000ef0 	.word	0x20000ef0
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800364e:	4b04      	ldr	r3, [pc, #16]	; (8003660 <xTaskGetTickCount+0x18>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000ee4 	.word	0x20000ee4

08003664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <xTaskIncrementTick+0x150>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 808e 	bne.w	8003794 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003678:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <xTaskIncrementTick+0x154>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003680:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <xTaskIncrementTick+0x154>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <xTaskIncrementTick+0x158>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	603b      	str	r3, [r7, #0]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xTaskIncrementTick+0x46>
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <xTaskIncrementTick+0x158>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <xTaskIncrementTick+0x15c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a41      	ldr	r2, [pc, #260]	; (80037bc <xTaskIncrementTick+0x158>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4a41      	ldr	r2, [pc, #260]	; (80037c0 <xTaskIncrementTick+0x15c>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <xTaskIncrementTick+0x160>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <xTaskIncrementTick+0x160>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	f000 fadf 	bl	8003c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <xTaskIncrementTick+0x164>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d34e      	bcc.n	8003776 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d8:	4b38      	ldr	r3, [pc, #224]	; (80037bc <xTaskIncrementTick+0x158>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <xTaskIncrementTick+0x82>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <xTaskIncrementTick+0x84>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ec:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <xTaskIncrementTick+0x164>)
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295
 80036f2:	601a      	str	r2, [r3, #0]
					break;
 80036f4:	e03f      	b.n	8003776 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <xTaskIncrementTick+0x158>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d203      	bcs.n	8003716 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800370e:	4a2e      	ldr	r2, [pc, #184]	; (80037c8 <xTaskIncrementTick+0x164>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6013      	str	r3, [r2, #0]
						break;
 8003714:	e02f      	b.n	8003776 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe ff86 	bl	800262c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	3318      	adds	r3, #24
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe ff7d 	bl	800262c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <xTaskIncrementTick+0x168>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d903      	bls.n	8003746 <xTaskIncrementTick+0xe2>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <xTaskIncrementTick+0x168>)
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <xTaskIncrementTick+0x16c>)
 8003754:	441a      	add	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7fe ff0a 	bl	8002576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <xTaskIncrementTick+0x170>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	429a      	cmp	r2, r3
 800376e:	d3b3      	bcc.n	80036d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003774:	e7b0      	b.n	80036d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <xTaskIncrementTick+0x170>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4914      	ldr	r1, [pc, #80]	; (80037d0 <xTaskIncrementTick+0x16c>)
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d907      	bls.n	800379e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e004      	b.n	800379e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <xTaskIncrementTick+0x174>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <xTaskIncrementTick+0x174>)
 800379c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <xTaskIncrementTick+0x178>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037aa:	697b      	ldr	r3, [r7, #20]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000f08 	.word	0x20000f08
 80037b8:	20000ee4 	.word	0x20000ee4
 80037bc:	20000e98 	.word	0x20000e98
 80037c0:	20000e9c 	.word	0x20000e9c
 80037c4:	20000ef8 	.word	0x20000ef8
 80037c8:	20000f00 	.word	0x20000f00
 80037cc:	20000ee8 	.word	0x20000ee8
 80037d0:	20000a10 	.word	0x20000a10
 80037d4:	20000a0c 	.word	0x20000a0c
 80037d8:	20000ef0 	.word	0x20000ef0
 80037dc:	20000ef4 	.word	0x20000ef4

080037e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <vTaskSwitchContext+0xb0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <vTaskSwitchContext+0xb4>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037f4:	e046      	b.n	8003884 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <vTaskSwitchContext+0xb4>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80037fc:	4b26      	ldr	r3, [pc, #152]	; (8003898 <vTaskSwitchContext+0xb8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e010      	b.n	8003826 <vTaskSwitchContext+0x46>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <vTaskSwitchContext+0x40>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	607b      	str	r3, [r7, #4]
}
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <vTaskSwitchContext+0x3e>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	491d      	ldr	r1, [pc, #116]	; (800389c <vTaskSwitchContext+0xbc>)
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0e4      	beq.n	8003804 <vTaskSwitchContext+0x24>
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <vTaskSwitchContext+0xbc>)
 8003846:	4413      	add	r3, r2
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3308      	adds	r3, #8
 800385c:	429a      	cmp	r2, r3
 800385e:	d104      	bne.n	800386a <vTaskSwitchContext+0x8a>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <vTaskSwitchContext+0xc0>)
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <vTaskSwitchContext+0xb8>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <vTaskSwitchContext+0xc0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3354      	adds	r3, #84	; 0x54
 8003880:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <vTaskSwitchContext+0xc4>)
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000f08 	.word	0x20000f08
 8003894:	20000ef4 	.word	0x20000ef4
 8003898:	20000ee8 	.word	0x20000ee8
 800389c:	20000a10 	.word	0x20000a10
 80038a0:	20000a0c 	.word	0x20000a0c
 80038a4:	20000104 	.word	0x20000104

080038a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	60fb      	str	r3, [r7, #12]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <vTaskPlaceOnEventList+0x44>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3318      	adds	r3, #24
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe fe70 	bl	80025bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038dc:	2101      	movs	r1, #1
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f000 fa84 	bl	8003dec <prvAddCurrentTaskToDelayedList>
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000a0c 	.word	0x20000a0c

080038f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	617b      	str	r3, [r7, #20]
}
 8003914:	bf00      	nop
 8003916:	e7fe      	b.n	8003916 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <vTaskPlaceOnEventListRestricted+0x54>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3318      	adds	r3, #24
 800391e:	4619      	mov	r1, r3
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7fe fe28 	bl	8002576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f000 fa59 	bl	8003dec <prvAddCurrentTaskToDelayedList>
	}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000a0c 	.word	0x20000a0c

08003948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60fb      	str	r3, [r7, #12]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	3318      	adds	r3, #24
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fe57 	bl	800262c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <xTaskRemoveFromEventList+0xb0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11d      	bne.n	80039c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fe4e 	bl	800262c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <xTaskRemoveFromEventList+0xb4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d903      	bls.n	80039a4 <xTaskRemoveFromEventList+0x5c>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <xTaskRemoveFromEventList+0xb4>)
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <xTaskRemoveFromEventList+0xb8>)
 80039b2:	441a      	add	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fe fddb 	bl	8002576 <vListInsertEnd>
 80039c0:	e005      	b.n	80039ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3318      	adds	r3, #24
 80039c6:	4619      	mov	r1, r3
 80039c8:	480e      	ldr	r0, [pc, #56]	; (8003a04 <xTaskRemoveFromEventList+0xbc>)
 80039ca:	f7fe fdd4 	bl	8002576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <xTaskRemoveFromEventList+0xc0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	429a      	cmp	r2, r3
 80039da:	d905      	bls.n	80039e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <xTaskRemoveFromEventList+0xc4>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e001      	b.n	80039ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80039ec:	697b      	ldr	r3, [r7, #20]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000f08 	.word	0x20000f08
 80039fc:	20000ee8 	.word	0x20000ee8
 8003a00:	20000a10 	.word	0x20000a10
 8003a04:	20000ea0 	.word	0x20000ea0
 8003a08:	20000a0c 	.word	0x20000a0c
 8003a0c:	20000ef4 	.word	0x20000ef4

08003a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <vTaskInternalSetTimeOutState+0x24>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <vTaskInternalSetTimeOutState+0x28>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	605a      	str	r2, [r3, #4]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000ef8 	.word	0x20000ef8
 8003a38:	20000ee4 	.word	0x20000ee4

08003a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	613b      	str	r3, [r7, #16]
}
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	60fb      	str	r3, [r7, #12]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a7e:	f000 fe0d 	bl	800469c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <xTaskCheckForTimeOut+0xbc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d102      	bne.n	8003aa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e023      	b.n	8003aea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <xTaskCheckForTimeOut+0xc0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d007      	beq.n	8003abe <xTaskCheckForTimeOut+0x82>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e015      	b.n	8003aea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d20b      	bcs.n	8003ae0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad2      	subs	r2, r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff9b 	bl	8003a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e004      	b.n	8003aea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003aea:	f000 fe07 	bl	80046fc <vPortExitCritical>

	return xReturn;
 8003aee:	69fb      	ldr	r3, [r7, #28]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000ee4 	.word	0x20000ee4
 8003afc:	20000ef8 	.word	0x20000ef8

08003b00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <vTaskMissedYield+0x14>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000ef4 	.word	0x20000ef4

08003b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b20:	f000 f852 	bl	8003bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <prvIdleTask+0x28>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d9f9      	bls.n	8003b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <prvIdleTask+0x2c>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b3c:	e7f0      	b.n	8003b20 <prvIdleTask+0x8>
 8003b3e:	bf00      	nop
 8003b40:	20000a10 	.word	0x20000a10
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	e00c      	b.n	8003b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <prvInitialiseTaskLists+0x60>)
 8003b60:	4413      	add	r3, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fcdc 	bl	8002520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b37      	cmp	r3, #55	; 0x37
 8003b72:	d9ef      	bls.n	8003b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b74:	480d      	ldr	r0, [pc, #52]	; (8003bac <prvInitialiseTaskLists+0x64>)
 8003b76:	f7fe fcd3 	bl	8002520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b7a:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <prvInitialiseTaskLists+0x68>)
 8003b7c:	f7fe fcd0 	bl	8002520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b80:	480c      	ldr	r0, [pc, #48]	; (8003bb4 <prvInitialiseTaskLists+0x6c>)
 8003b82:	f7fe fccd 	bl	8002520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b86:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <prvInitialiseTaskLists+0x70>)
 8003b88:	f7fe fcca 	bl	8002520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b8c:	480b      	ldr	r0, [pc, #44]	; (8003bbc <prvInitialiseTaskLists+0x74>)
 8003b8e:	f7fe fcc7 	bl	8002520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <prvInitialiseTaskLists+0x78>)
 8003b94:	4a05      	ldr	r2, [pc, #20]	; (8003bac <prvInitialiseTaskLists+0x64>)
 8003b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <prvInitialiseTaskLists+0x7c>)
 8003b9a:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <prvInitialiseTaskLists+0x68>)
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000a10 	.word	0x20000a10
 8003bac:	20000e70 	.word	0x20000e70
 8003bb0:	20000e84 	.word	0x20000e84
 8003bb4:	20000ea0 	.word	0x20000ea0
 8003bb8:	20000eb4 	.word	0x20000eb4
 8003bbc:	20000ecc 	.word	0x20000ecc
 8003bc0:	20000e98 	.word	0x20000e98
 8003bc4:	20000e9c 	.word	0x20000e9c

08003bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bce:	e019      	b.n	8003c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bd0:	f000 fd64 	bl	800469c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <prvCheckTasksWaitingTermination+0x50>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fd23 	bl	800262c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <prvCheckTasksWaitingTermination+0x54>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <prvCheckTasksWaitingTermination+0x54>)
 8003bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvCheckTasksWaitingTermination+0x58>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <prvCheckTasksWaitingTermination+0x58>)
 8003bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bfa:	f000 fd7f 	bl	80046fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f810 	bl	8003c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <prvCheckTasksWaitingTermination+0x58>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e1      	bne.n	8003bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000eb4 	.word	0x20000eb4
 8003c1c:	20000ee0 	.word	0x20000ee0
 8003c20:	20000ec8 	.word	0x20000ec8

08003c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3354      	adds	r3, #84	; 0x54
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 f855 	bl	8004ce0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 feed 	bl	8004a24 <vPortFree>
				vPortFree( pxTCB );
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 feea 	bl	8004a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c50:	e018      	b.n	8003c84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d103      	bne.n	8003c64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fee1 	bl	8004a24 <vPortFree>
	}
 8003c62:	e00f      	b.n	8003c84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d00a      	beq.n	8003c84 <prvDeleteTCB+0x60>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60fb      	str	r3, [r7, #12]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <prvDeleteTCB+0x5e>
	}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <prvResetNextTaskUnblockTime+0x40>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <prvResetNextTaskUnblockTime+0x14>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <prvResetNextTaskUnblockTime+0x16>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <prvResetNextTaskUnblockTime+0x44>)
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cae:	e008      	b.n	8003cc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <prvResetNextTaskUnblockTime+0x40>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <prvResetNextTaskUnblockTime+0x44>)
 8003cc0:	6013      	str	r3, [r2, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000e98 	.word	0x20000e98
 8003cd0:	20000f00 	.word	0x20000f00

08003cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <xTaskGetSchedulerState+0x34>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	e008      	b.n	8003cfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <xTaskGetSchedulerState+0x38>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	e001      	b.n	8003cfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cfa:	687b      	ldr	r3, [r7, #4]
	}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000eec 	.word	0x20000eec
 8003d0c:	20000f08 	.word	0x20000f08

08003d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d056      	beq.n	8003dd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <xTaskPriorityDisinherit+0xd0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d00a      	beq.n	8003d46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60bb      	str	r3, [r7, #8]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d02c      	beq.n	8003dd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d128      	bne.n	8003dd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fc50 	bl	800262c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <xTaskPriorityDisinherit+0xd4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d903      	bls.n	8003db4 <xTaskPriorityDisinherit+0xa4>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <xTaskPriorityDisinherit+0xd4>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <xTaskPriorityDisinherit+0xd8>)
 8003dc2:	441a      	add	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fe fbd3 	bl	8002576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dd4:	697b      	ldr	r3, [r7, #20]
	}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000a0c 	.word	0x20000a0c
 8003de4:	20000ee8 	.word	0x20000ee8
 8003de8:	20000a10 	.word	0x20000a10

08003dec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <prvAddCurrentTaskToDelayedList+0x90>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fc12 	bl	800262c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d10a      	bne.n	8003e26 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4819      	ldr	r0, [pc, #100]	; (8003e84 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e20:	f7fe fba9 	bl	8002576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e24:	e026      	b.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d209      	bcs.n	8003e52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f7fe fbb6 	bl	80025bc <vListInsert>
}
 8003e50:	e010      	b.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fe fbac 	bl	80025bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d202      	bcs.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000ee4 	.word	0x20000ee4
 8003e80:	20000a0c 	.word	0x20000a0c
 8003e84:	20000ecc 	.word	0x20000ecc
 8003e88:	20000e9c 	.word	0x20000e9c
 8003e8c:	20000e98 	.word	0x20000e98
 8003e90:	20000f00 	.word	0x20000f00

08003e94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e9e:	f000 facb 	bl	8004438 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <xTimerCreateTimerTask+0x80>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d021      	beq.n	8003eee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eb2:	1d3a      	adds	r2, r7, #4
 8003eb4:	f107 0108 	add.w	r1, r7, #8
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fb15 	bl	80024ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	9202      	str	r2, [sp, #8]
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	2302      	movs	r3, #2
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	4910      	ldr	r1, [pc, #64]	; (8003f18 <xTimerCreateTimerTask+0x84>)
 8003ed6:	4811      	ldr	r0, [pc, #68]	; (8003f1c <xTimerCreateTimerTask+0x88>)
 8003ed8:	f7ff f8b6 	bl	8003048 <xTaskCreateStatic>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <xTimerCreateTimerTask+0x8c>)
 8003ee0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <xTimerCreateTimerTask+0x8c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003eea:	2301      	movs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	613b      	str	r3, [r7, #16]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f0a:	697b      	ldr	r3, [r7, #20]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000f3c 	.word	0x20000f3c
 8003f18:	08004ea0 	.word	0x08004ea0
 8003f1c:	08004041 	.word	0x08004041
 8003f20:	20000f40 	.word	0x20000f40

08003f24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	623b      	str	r3, [r7, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02a      	beq.n	8003fb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	dc18      	bgt.n	8003f9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f6c:	f7ff feb2 	bl	8003cd4 <xTaskGetSchedulerState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d109      	bne.n	8003f8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	f107 0110 	add.w	r1, r7, #16
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	f7fe fc7f 	bl	8002884 <xQueueGenericSend>
 8003f86:	6278      	str	r0, [r7, #36]	; 0x24
 8003f88:	e012      	b.n	8003fb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f107 0110 	add.w	r1, r7, #16
 8003f92:	2300      	movs	r3, #0
 8003f94:	2200      	movs	r2, #0
 8003f96:	f7fe fc75 	bl	8002884 <xQueueGenericSend>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f9c:	e008      	b.n	8003fb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f107 0110 	add.w	r1, r7, #16
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	f7fe fd69 	bl	8002a80 <xQueueGenericSendFromISR>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3728      	adds	r7, #40	; 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000f3c 	.word	0x20000f3c

08003fc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <prvProcessExpiredTimer+0x7c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fb27 	bl	800262c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d122      	bne.n	800402c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	18d1      	adds	r1, r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f000 f8c8 	bl	8004188 <prvInsertTimerInActiveList>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ffe:	2300      	movs	r3, #0
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	2100      	movs	r1, #0
 8004008:	6978      	ldr	r0, [r7, #20]
 800400a:	f7ff ff8b 	bl	8003f24 <xTimerGenericCommand>
 800400e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	60fb      	str	r3, [r7, #12]
}
 8004028:	bf00      	nop
 800402a:	e7fe      	b.n	800402a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	6978      	ldr	r0, [r7, #20]
 8004032:	4798      	blx	r3
}
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000f34 	.word	0x20000f34

08004040 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f857 	bl	8004100 <prvGetNextExpireTime>
 8004052:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4619      	mov	r1, r3
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f803 	bl	8004064 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800405e:	f000 f8d5 	bl	800420c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004062:	e7f1      	b.n	8004048 <prvTimerTask+0x8>

08004064 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800406e:	f7ff fa3f 	bl	80034f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f866 	bl	8004148 <prvSampleTimeNow>
 800407c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d130      	bne.n	80040e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <prvProcessTimerOrBlockTask+0x3c>
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	429a      	cmp	r2, r3
 8004090:	d806      	bhi.n	80040a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004092:	f7ff fa3b 	bl	800350c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff91 	bl	8003fc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800409e:	e024      	b.n	80040ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <prvProcessTimerOrBlockTask+0x90>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040b8:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <prvProcessTimerOrBlockTask+0x94>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f7fe ff8b 	bl	8002fe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040ca:	f7ff fa1f 	bl	800350c <xTaskResumeAll>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <prvProcessTimerOrBlockTask+0x98>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	f3bf 8f6f 	isb	sy
}
 80040e4:	e001      	b.n	80040ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040e6:	f7ff fa11 	bl	800350c <xTaskResumeAll>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000f38 	.word	0x20000f38
 80040f8:	20000f3c 	.word	0x20000f3c
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <prvGetNextExpireTime+0x44>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2300      	movne	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <prvGetNextExpireTime+0x44>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e001      	b.n	8004136 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000f34 	.word	0x20000f34

08004148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004150:	f7ff fa7a 	bl	8003648 <xTaskGetTickCount>
 8004154:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <prvSampleTimeNow+0x3c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	429a      	cmp	r2, r3
 800415e:	d205      	bcs.n	800416c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004160:	f000 f908 	bl	8004374 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e002      	b.n	8004172 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <prvSampleTimeNow+0x3c>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000f44 	.word	0x20000f44

08004188 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d812      	bhi.n	80041d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e01b      	b.n	80041fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <prvInsertTimerInActiveList+0x7c>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe f9f5 	bl	80025bc <vListInsert>
 80041d2:	e012      	b.n	80041fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d206      	bcs.n	80041ea <prvInsertTimerInActiveList+0x62>
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e007      	b.n	80041fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <prvInsertTimerInActiveList+0x80>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe f9e1 	bl	80025bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041fa:	697b      	ldr	r3, [r7, #20]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000f38 	.word	0x20000f38
 8004208:	20000f34 	.word	0x20000f34

0800420c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08e      	sub	sp, #56	; 0x38
 8004210:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004212:	e09d      	b.n	8004350 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	da18      	bge.n	800424c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	3304      	adds	r3, #4
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fb      	str	r3, [r7, #28]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004242:	6850      	ldr	r0, [r2, #4]
 8004244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004246:	6892      	ldr	r2, [r2, #8]
 8004248:	4611      	mov	r1, r2
 800424a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db7d      	blt.n	800434e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe f9e2 	bl	800262c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004268:	463b      	mov	r3, r7
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff6c 	bl	8004148 <prvSampleTimeNow>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b09      	cmp	r3, #9
 8004276:	d86b      	bhi.n	8004350 <prvProcessReceivedCommands+0x144>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <prvProcessReceivedCommands+0x74>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042a9 	.word	0x080042a9
 800428c:	08004351 	.word	0x08004351
 8004290:	08004305 	.word	0x08004305
 8004294:	0800433d 	.word	0x0800433d
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042a9 	.word	0x080042a9
 80042a0:	08004351 	.word	0x08004351
 80042a4:	08004305 	.word	0x08004305
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	18d1      	adds	r1, r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b6:	f7ff ff67 	bl	8004188 <prvInsertTimerInActiveList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d047      	beq.n	8004350 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d13f      	bne.n	8004350 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	441a      	add	r2, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e2:	f7ff fe1f 	bl	8003f24 <xTimerGenericCommand>
 80042e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d130      	bne.n	8004350 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	61bb      	str	r3, [r7, #24]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	617b      	str	r3, [r7, #20]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	18d1      	adds	r1, r2, r3
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004336:	f7ff ff27 	bl	8004188 <prvInsertTimerInActiveList>
					break;
 800433a:	e009      	b.n	8004350 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004348:	f000 fb6c 	bl	8004a24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800434c:	e000      	b.n	8004350 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800434e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <prvProcessReceivedCommands+0x164>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1d39      	adds	r1, r7, #4
 8004356:	2200      	movs	r2, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe fc29 	bl	8002bb0 <xQueueReceive>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	f47f af57 	bne.w	8004214 <prvProcessReceivedCommands+0x8>
	}
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	3730      	adds	r7, #48	; 0x30
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000f3c 	.word	0x20000f3c

08004374 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800437a:	e045      	b.n	8004408 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800437c:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <prvSwitchTimerLists+0xbc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <prvSwitchTimerLists+0xbc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3304      	adds	r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe f949 	bl	800262c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d12e      	bne.n	8004408 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d90e      	bls.n	80043da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <prvSwitchTimerLists+0xbc>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7fe f8f2 	bl	80025bc <vListInsert>
 80043d8:	e016      	b.n	8004408 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043da:	2300      	movs	r3, #0
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	2100      	movs	r1, #0
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff fd9d 	bl	8003f24 <xTimerGenericCommand>
 80043ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <prvSwitchTimerLists+0x94>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	603b      	str	r3, [r7, #0]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <prvSwitchTimerLists+0xbc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1b4      	bne.n	800437c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <prvSwitchTimerLists+0xbc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <prvSwitchTimerLists+0xc0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <prvSwitchTimerLists+0xbc>)
 800441e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004420:	4a04      	ldr	r2, [pc, #16]	; (8004434 <prvSwitchTimerLists+0xc0>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	6013      	str	r3, [r2, #0]
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000f34 	.word	0x20000f34
 8004434:	20000f38 	.word	0x20000f38

08004438 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800443e:	f000 f92d 	bl	800469c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <prvCheckForValidListAndQueue+0x60>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d120      	bne.n	800448c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800444a:	4814      	ldr	r0, [pc, #80]	; (800449c <prvCheckForValidListAndQueue+0x64>)
 800444c:	f7fe f868 	bl	8002520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004450:	4813      	ldr	r0, [pc, #76]	; (80044a0 <prvCheckForValidListAndQueue+0x68>)
 8004452:	f7fe f865 	bl	8002520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <prvCheckForValidListAndQueue+0x6c>)
 8004458:	4a10      	ldr	r2, [pc, #64]	; (800449c <prvCheckForValidListAndQueue+0x64>)
 800445a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <prvCheckForValidListAndQueue+0x70>)
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <prvCheckForValidListAndQueue+0x68>)
 8004460:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004462:	2300      	movs	r3, #0
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <prvCheckForValidListAndQueue+0x74>)
 8004468:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <prvCheckForValidListAndQueue+0x78>)
 800446a:	2110      	movs	r1, #16
 800446c:	200a      	movs	r0, #10
 800446e:	f7fe f96f 	bl	8002750 <xQueueGenericCreateStatic>
 8004472:	4603      	mov	r3, r0
 8004474:	4a08      	ldr	r2, [pc, #32]	; (8004498 <prvCheckForValidListAndQueue+0x60>)
 8004476:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <prvCheckForValidListAndQueue+0x60>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <prvCheckForValidListAndQueue+0x60>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	490b      	ldr	r1, [pc, #44]	; (80044b4 <prvCheckForValidListAndQueue+0x7c>)
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fd82 	bl	8002f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800448c:	f000 f936 	bl	80046fc <vPortExitCritical>
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000f3c 	.word	0x20000f3c
 800449c:	20000f0c 	.word	0x20000f0c
 80044a0:	20000f20 	.word	0x20000f20
 80044a4:	20000f34 	.word	0x20000f34
 80044a8:	20000f38 	.word	0x20000f38
 80044ac:	20000fe8 	.word	0x20000fe8
 80044b0:	20000f48 	.word	0x20000f48
 80044b4:	08004ea8 	.word	0x08004ea8

080044b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3b04      	subs	r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b04      	subs	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f023 0201 	bic.w	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b04      	subs	r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <pxPortInitialiseStack+0x54>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3b14      	subs	r3, #20
 80044f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b20      	subs	r3, #32
 80044fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004500:	68fb      	ldr	r3, [r7, #12]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	08004511 	.word	0x08004511

08004510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <prvTaskExitError+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d00a      	beq.n	800453a <prvTaskExitError+0x2a>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	60fb      	str	r3, [r7, #12]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <prvTaskExitError+0x28>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	60bb      	str	r3, [r7, #8]
}
 800454c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800454e:	bf00      	nop
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0fc      	beq.n	8004550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000100 	.word	0x20000100
	...

08004570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <pxCurrentTCBConst2>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	6808      	ldr	r0, [r1, #0]
 8004576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800457a:	f380 8809 	msr	PSP, r0
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	f04e 0e0d 	orr.w	lr, lr, #13
 800458e:	4770      	bx	lr

08004590 <pxCurrentTCBConst2>:
 8004590:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004598:	4806      	ldr	r0, [pc, #24]	; (80045b4 <prvPortStartFirstTask+0x1c>)
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	6800      	ldr	r0, [r0, #0]
 800459e:	f380 8808 	msr	MSP, r0
 80045a2:	b662      	cpsie	i
 80045a4:	b661      	cpsie	f
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	df00      	svc	0
 80045b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045b2:	bf00      	nop
 80045b4:	e000ed08 	.word	0xe000ed08

080045b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045be:	4b32      	ldr	r3, [pc, #200]	; (8004688 <xPortStartScheduler+0xd0>)
 80045c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <xPortStartScheduler+0xd4>)
 80045e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045e6:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <xPortStartScheduler+0xd8>)
 80045e8:	2207      	movs	r2, #7
 80045ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ec:	e009      	b.n	8004602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045ee:	4b28      	ldr	r3, [pc, #160]	; (8004690 <xPortStartScheduler+0xd8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <xPortStartScheduler+0xd8>)
 80045f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d0ef      	beq.n	80045ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <xPortStartScheduler+0xd8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1c3 0307 	rsb	r3, r3, #7
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00a      	beq.n	8004630 <xPortStartScheduler+0x78>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60bb      	str	r3, [r7, #8]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <xPortStartScheduler+0xd8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	4a16      	ldr	r2, [pc, #88]	; (8004690 <xPortStartScheduler+0xd8>)
 8004638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800463a:	4b15      	ldr	r3, [pc, #84]	; (8004690 <xPortStartScheduler+0xd8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004642:	4a13      	ldr	r2, [pc, #76]	; (8004690 <xPortStartScheduler+0xd8>)
 8004644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <xPortStartScheduler+0xdc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a10      	ldr	r2, [pc, #64]	; (8004694 <xPortStartScheduler+0xdc>)
 8004654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <xPortStartScheduler+0xdc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <xPortStartScheduler+0xdc>)
 8004660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004666:	f000 f8b9 	bl	80047dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <xPortStartScheduler+0xe0>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004670:	f7ff ff92 	bl	8004598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004674:	f7ff f8b4 	bl	80037e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004678:	f7ff ff4a 	bl	8004510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	e000e400 	.word	0xe000e400
 800468c:	20001038 	.word	0x20001038
 8004690:	2000103c 	.word	0x2000103c
 8004694:	e000ed20 	.word	0xe000ed20
 8004698:	20000100 	.word	0x20000100

0800469c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
}
 80046b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <vPortEnterCritical+0x58>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	4a0d      	ldr	r2, [pc, #52]	; (80046f4 <vPortEnterCritical+0x58>)
 80046be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <vPortEnterCritical+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10f      	bne.n	80046e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <vPortEnterCritical+0x5c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	603b      	str	r3, [r7, #0]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <vPortEnterCritical+0x4a>
	}
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000100 	.word	0x20000100
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <vPortExitCritical+0x4c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <vPortExitCritical+0x24>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	607b      	str	r3, [r7, #4]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <vPortExitCritical+0x4c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3b01      	subs	r3, #1
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <vPortExitCritical+0x4c>)
 8004728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <vPortExitCritical+0x4c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <vPortExitCritical+0x42>
 8004732:	2300      	movs	r3, #0
 8004734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f383 8811 	msr	BASEPRI, r3
}
 800473c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	20000100 	.word	0x20000100
 800474c:	00000000 	.word	0x00000000

08004750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004750:	f3ef 8009 	mrs	r0, PSP
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <pxCurrentTCBConst>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004760:	6010      	str	r0, [r2, #0]
 8004762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800476a:	f380 8811 	msr	BASEPRI, r0
 800476e:	f7ff f837 	bl	80037e0 <vTaskSwitchContext>
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8811 	msr	BASEPRI, r0
 800477a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	6808      	ldr	r0, [r1, #0]
 8004782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004786:	f380 8809 	msr	PSP, r0
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	4770      	bx	lr

08004790 <pxCurrentTCBConst>:
 8004790:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	607b      	str	r3, [r7, #4]
}
 80047b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047b2:	f7fe ff57 	bl	8003664 <xTaskIncrementTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <SysTick_Handler+0x40>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f383 8811 	msr	BASEPRI, r3
}
 80047ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <vPortSetupTimerInterrupt+0x30>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <vPortSetupTimerInterrupt+0x34>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <vPortSetupTimerInterrupt+0x38>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a09      	ldr	r2, [pc, #36]	; (8004818 <vPortSetupTimerInterrupt+0x3c>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	4a08      	ldr	r2, [pc, #32]	; (800481c <vPortSetupTimerInterrupt+0x40>)
 80047fa:	3b01      	subs	r3, #1
 80047fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047fe:	4b03      	ldr	r3, [pc, #12]	; (800480c <vPortSetupTimerInterrupt+0x30>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	e000e010 	.word	0xe000e010
 8004810:	e000e018 	.word	0xe000e018
 8004814:	200000f0 	.word	0x200000f0
 8004818:	10624dd3 	.word	0x10624dd3
 800481c:	e000e014 	.word	0xe000e014

08004820 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004826:	f3ef 8305 	mrs	r3, IPSR
 800482a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d914      	bls.n	800485c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004832:	4a16      	ldr	r2, [pc, #88]	; (800488c <vPortValidateInterruptPriority+0x6c>)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <vPortValidateInterruptPriority+0x70>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	7afa      	ldrb	r2, [r7, #11]
 8004842:	429a      	cmp	r2, r3
 8004844:	d20a      	bcs.n	800485c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	607b      	str	r3, [r7, #4]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <vPortValidateInterruptPriority+0x74>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <vPortValidateInterruptPriority+0x78>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d90a      	bls.n	8004882 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	603b      	str	r3, [r7, #0]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <vPortValidateInterruptPriority+0x60>
	}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	e000e3f0 	.word	0xe000e3f0
 8004890:	20001038 	.word	0x20001038
 8004894:	e000ed0c 	.word	0xe000ed0c
 8004898:	2000103c 	.word	0x2000103c

0800489c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048a8:	f7fe fe22 	bl	80034f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048ac:	4b58      	ldr	r3, [pc, #352]	; (8004a10 <pvPortMalloc+0x174>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048b4:	f000 f910 	bl	8004ad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048b8:	4b56      	ldr	r3, [pc, #344]	; (8004a14 <pvPortMalloc+0x178>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f040 808e 	bne.w	80049e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01d      	beq.n	8004908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048cc:	2208      	movs	r2, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d014      	beq.n	8004908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f023 0307 	bic.w	r3, r3, #7
 80048e4:	3308      	adds	r3, #8
 80048e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <pvPortMalloc+0x6c>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	617b      	str	r3, [r7, #20]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d069      	beq.n	80049e2 <pvPortMalloc+0x146>
 800490e:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <pvPortMalloc+0x17c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d864      	bhi.n	80049e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004918:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <pvPortMalloc+0x180>)
 800491a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800491c:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <pvPortMalloc+0x180>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004922:	e004      	b.n	800492e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <pvPortMalloc+0xa4>
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f1      	bne.n	8004924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004940:	4b33      	ldr	r3, [pc, #204]	; (8004a10 <pvPortMalloc+0x174>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004946:	429a      	cmp	r2, r3
 8004948:	d04b      	beq.n	80049e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	4413      	add	r3, r2
 8004952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	2308      	movs	r3, #8
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	429a      	cmp	r2, r3
 800496a:	d91f      	bls.n	80049ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <pvPortMalloc+0xf8>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	613b      	str	r3, [r7, #16]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	f000 f8f8 	bl	8004b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <pvPortMalloc+0x17c>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <pvPortMalloc+0x17c>)
 80049b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <pvPortMalloc+0x17c>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <pvPortMalloc+0x184>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d203      	bcs.n	80049ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <pvPortMalloc+0x17c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <pvPortMalloc+0x184>)
 80049cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <pvPortMalloc+0x178>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049e2:	f7fe fd93 	bl	800350c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <pvPortMalloc+0x16a>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	60fb      	str	r3, [r7, #12]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <pvPortMalloc+0x168>
	return pvReturn;
 8004a06:	69fb      	ldr	r3, [r7, #28]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20001c48 	.word	0x20001c48
 8004a14:	20001c54 	.word	0x20001c54
 8004a18:	20001c4c 	.word	0x20001c4c
 8004a1c:	20001c40 	.word	0x20001c40
 8004a20:	20001c50 	.word	0x20001c50

08004a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d048      	beq.n	8004ac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a36:	2308      	movs	r3, #8
 8004a38:	425b      	negs	r3, r3
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <vPortFree+0xac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <vPortFree+0x44>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60fb      	str	r3, [r7, #12]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <vPortFree+0x62>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <vPortFree+0xac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d019      	beq.n	8004ac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <vPortFree+0xac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004aac:	f7fe fd20 	bl	80034f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <vPortFree+0xb0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4413      	add	r3, r2
 8004aba:	4a06      	ldr	r2, [pc, #24]	; (8004ad4 <vPortFree+0xb0>)
 8004abc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004abe:	6938      	ldr	r0, [r7, #16]
 8004ac0:	f000 f86c 	bl	8004b9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ac4:	f7fe fd22 	bl	800350c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20001c54 	.word	0x20001c54
 8004ad4:	20001c4c 	.word	0x20001c4c

08004ad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ade:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <prvHeapInit+0xac>)
 8004ae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00c      	beq.n	8004b0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3307      	adds	r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0307 	bic.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <prvHeapInit+0xac>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <prvHeapInit+0xb0>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <prvHeapInit+0xb0>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	4413      	add	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b24:	2208      	movs	r2, #8
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0307 	bic.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <prvHeapInit+0xb4>)
 8004b38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <prvHeapInit+0xb4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <prvHeapInit+0xb4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvHeapInit+0xb4>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <prvHeapInit+0xb8>)
 8004b66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <prvHeapInit+0xbc>)
 8004b6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <prvHeapInit+0xc0>)
 8004b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20001040 	.word	0x20001040
 8004b88:	20001c40 	.word	0x20001c40
 8004b8c:	20001c48 	.word	0x20001c48
 8004b90:	20001c50 	.word	0x20001c50
 8004b94:	20001c4c 	.word	0x20001c4c
 8004b98:	20001c54 	.word	0x20001c54

08004b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <prvInsertBlockIntoFreeList+0xa8>)
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e002      	b.n	8004bb0 <prvInsertBlockIntoFreeList+0x14>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d8f7      	bhi.n	8004baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d108      	bne.n	8004bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	441a      	add	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d118      	bne.n	8004c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <prvInsertBlockIntoFreeList+0xac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d00d      	beq.n	8004c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e008      	b.n	8004c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvInsertBlockIntoFreeList+0xac>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e003      	b.n	8004c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d002      	beq.n	8004c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	20001c40 	.word	0x20001c40
 8004c48:	20001c48 	.word	0x20001c48

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2600      	movs	r6, #0
 8004c50:	4d0c      	ldr	r5, [pc, #48]	; (8004c84 <__libc_init_array+0x38>)
 8004c52:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c54:	1b64      	subs	r4, r4, r5
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	f000 f8f0 	bl	8004e40 <_init>
 8004c60:	2600      	movs	r6, #0
 8004c62:	4d0a      	ldr	r5, [pc, #40]	; (8004c8c <__libc_init_array+0x40>)
 8004c64:	4c0a      	ldr	r4, [pc, #40]	; (8004c90 <__libc_init_array+0x44>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	42a6      	cmp	r6, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c74:	4798      	blx	r3
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7e:	4798      	blx	r3
 8004c80:	3601      	adds	r6, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08004f70 	.word	0x08004f70
 8004c88:	08004f70 	.word	0x08004f70
 8004c8c:	08004f70 	.word	0x08004f70
 8004c90:	08004f74 	.word	0x08004f74

08004c94 <__retarget_lock_acquire_recursive>:
 8004c94:	4770      	bx	lr

08004c96 <__retarget_lock_release_recursive>:
 8004c96:	4770      	bx	lr

08004c98 <memcpy>:
 8004c98:	440a      	add	r2, r1
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca0:	d100      	bne.n	8004ca4 <memcpy+0xc>
 8004ca2:	4770      	bx	lr
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb0:	d1f9      	bne.n	8004ca6 <memcpy+0xe>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <memset>:
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4402      	add	r2, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xa>
 8004cbc:	4770      	bx	lr
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x4>

08004cc4 <cleanup_glue>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	6809      	ldr	r1, [r1, #0]
 8004cca:	4605      	mov	r5, r0
 8004ccc:	b109      	cbz	r1, 8004cd2 <cleanup_glue+0xe>
 8004cce:	f7ff fff9 	bl	8004cc4 <cleanup_glue>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cda:	f000 b869 	b.w	8004db0 <_free_r>
	...

08004ce0 <_reclaim_reent>:
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <_reclaim_reent+0xb4>)
 8004ce2:	b570      	push	{r4, r5, r6, lr}
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4283      	cmp	r3, r0
 8004cea:	d051      	beq.n	8004d90 <_reclaim_reent+0xb0>
 8004cec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cee:	b143      	cbz	r3, 8004d02 <_reclaim_reent+0x22>
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d14a      	bne.n	8004d8c <_reclaim_reent+0xac>
 8004cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	b111      	cbz	r1, 8004d02 <_reclaim_reent+0x22>
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f857 	bl	8004db0 <_free_r>
 8004d02:	6961      	ldr	r1, [r4, #20]
 8004d04:	b111      	cbz	r1, 8004d0c <_reclaim_reent+0x2c>
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 f852 	bl	8004db0 <_free_r>
 8004d0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d0e:	b111      	cbz	r1, 8004d16 <_reclaim_reent+0x36>
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 f84d 	bl	8004db0 <_free_r>
 8004d16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d18:	b111      	cbz	r1, 8004d20 <_reclaim_reent+0x40>
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 f848 	bl	8004db0 <_free_r>
 8004d20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d22:	b111      	cbz	r1, 8004d2a <_reclaim_reent+0x4a>
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f843 	bl	8004db0 <_free_r>
 8004d2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d2c:	b111      	cbz	r1, 8004d34 <_reclaim_reent+0x54>
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 f83e 	bl	8004db0 <_free_r>
 8004d34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d36:	b111      	cbz	r1, 8004d3e <_reclaim_reent+0x5e>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 f839 	bl	8004db0 <_free_r>
 8004d3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d40:	b111      	cbz	r1, 8004d48 <_reclaim_reent+0x68>
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 f834 	bl	8004db0 <_free_r>
 8004d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d4a:	b111      	cbz	r1, 8004d52 <_reclaim_reent+0x72>
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 f82f 	bl	8004db0 <_free_r>
 8004d52:	69a3      	ldr	r3, [r4, #24]
 8004d54:	b1e3      	cbz	r3, 8004d90 <_reclaim_reent+0xb0>
 8004d56:	4620      	mov	r0, r4
 8004d58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d5a:	4798      	blx	r3
 8004d5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d5e:	b1b9      	cbz	r1, 8004d90 <_reclaim_reent+0xb0>
 8004d60:	4620      	mov	r0, r4
 8004d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d66:	f7ff bfad 	b.w	8004cc4 <cleanup_glue>
 8004d6a:	5949      	ldr	r1, [r1, r5]
 8004d6c:	b941      	cbnz	r1, 8004d80 <_reclaim_reent+0xa0>
 8004d6e:	3504      	adds	r5, #4
 8004d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d72:	2d80      	cmp	r5, #128	; 0x80
 8004d74:	68d9      	ldr	r1, [r3, #12]
 8004d76:	d1f8      	bne.n	8004d6a <_reclaim_reent+0x8a>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 f819 	bl	8004db0 <_free_r>
 8004d7e:	e7ba      	b.n	8004cf6 <_reclaim_reent+0x16>
 8004d80:	680e      	ldr	r6, [r1, #0]
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f814 	bl	8004db0 <_free_r>
 8004d88:	4631      	mov	r1, r6
 8004d8a:	e7ef      	b.n	8004d6c <_reclaim_reent+0x8c>
 8004d8c:	2500      	movs	r5, #0
 8004d8e:	e7ef      	b.n	8004d70 <_reclaim_reent+0x90>
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
 8004d92:	bf00      	nop
 8004d94:	20000104 	.word	0x20000104

08004d98 <__malloc_lock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_lock+0x8>)
 8004d9a:	f7ff bf7b 	b.w	8004c94 <__retarget_lock_acquire_recursive>
 8004d9e:	bf00      	nop
 8004da0:	20001c58 	.word	0x20001c58

08004da4 <__malloc_unlock>:
 8004da4:	4801      	ldr	r0, [pc, #4]	; (8004dac <__malloc_unlock+0x8>)
 8004da6:	f7ff bf76 	b.w	8004c96 <__retarget_lock_release_recursive>
 8004daa:	bf00      	nop
 8004dac:	20001c58 	.word	0x20001c58

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d040      	beq.n	8004e3a <_free_r+0x8a>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f7ff ffe8 	bl	8004d98 <__malloc_lock>
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <_free_r+0x8c>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x2c>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd8:	f7ff bfe4 	b.w	8004da4 <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x42>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	1821      	adds	r1, r4, r0
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x1e>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x4c>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x42>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1850      	adds	r0, r2, r1
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x6c>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	4401      	add	r1, r0
 8004e08:	1850      	adds	r0, r2, r1
 8004e0a:	4283      	cmp	r3, r0
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x22>
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4401      	add	r1, r0
 8004e16:	6011      	str	r1, [r2, #0]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x22>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x74>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x22>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	1821      	adds	r1, r4, r0
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf01      	itttt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	1809      	addeq	r1, r1, r0
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	6054      	str	r4, [r2, #4]
 8004e38:	e7cb      	b.n	8004dd2 <_free_r+0x22>
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	20001c5c 	.word	0x20001c5c

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
